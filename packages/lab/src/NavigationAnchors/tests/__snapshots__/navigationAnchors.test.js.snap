// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`User withStyles should handle click action correctly 1`] = `
<WithStyles(NavigationAnchors)
  onClick={[Function]}
  options={
    Array [
      Object {
        "label": "Option1",
        "value": "Value1",
      },
      Object {
        "label": "Option2",
        "value": "Value2",
      },
      Object {
        "label": "Option3",
        "value": "Value3",
      },
    ]
  }
>
  <NavigationAnchors
    classes={
      Object {
        "listItemGutters": "HvNavigationAnchors-listItemGutters",
        "listItemSelected": "HvNavigationAnchors-listItemSelected",
        "root": "HvNavigationAnchors-root",
      }
    }
    onClick={[Function]}
    options={
      Array [
        Object {
          "label": "Option1",
          "value": "Value1",
        },
        Object {
          "label": "Option2",
          "value": "Value2",
        },
        Object {
          "label": "Option3",
          "value": "Value3",
        },
      ]
    }
  >
    <WithStyles(ForwardRef)
      className="HvNavigationAnchors-root"
      interactive={true}
    >
      <ForwardRef
        className="HvNavigationAnchors-root"
        classes={
          Object {
            "root": "HvListContainer-root",
          }
        }
        interactive={true}
      >
        <ul
          className="HvNavigationAnchors-root HvListContainer-root"
        >
          <WithStyles(HvListItem)
            classes={
              Object {
                "gutters": "HvNavigationAnchors-listItemGutters",
                "selected": "HvNavigationAnchors-listItemSelected",
              }
            }
            key=".$Option1"
            onClick={[Function]}
            selected={true}
            tabIndex={0}
          >
            <HvListItem
              classes={
                Object {
                  "condensed": "HvListItem-condensed",
                  "disabled": "HvListItem-disabled",
                  "endAdornment": "HvListItem-endAdornment",
                  "focus": "HvListItem-focus",
                  "gutters": "HvListItem-gutters HvNavigationAnchors-listItemGutters",
                  "interactive": "HvListItem-interactive",
                  "root": "HvListItem-root",
                  "selected": "HvListItem-selected HvNavigationAnchors-listItemSelected",
                  "startAdornment": "HvListItem-startAdornment",
                  "withEndAdornment": "HvListItem-withEndAdornment",
                  "withStartAdornment": "HvListItem-withStartAdornment",
                }
              }
              onClick={[Function]}
              selected={true}
              tabIndex={0}
            >
              <WithStyles(Focus)
                classes={
                  Object {
                    "focus": "HvListItem-focus",
                  }
                }
                configuration={
                  Object {
                    "tabIndex": 0,
                  }
                }
                rootRef={
                  Object {
                    "current": <ul
                      class="HvNavigationAnchors-root HvListContainer-root"
                    >
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                        tabindex="0"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option1
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option2
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option3
                        </div>
                      </li>
                    </ul>,
                  }
                }
                selected={true}
                strategy="menu"
              >
                <Focus
                  classes={
                    Object {
                      "disabled": "HvFocus-disabled",
                      "externalReference": "HvFocus-externalReference",
                      "falseFocus": "HvFocus-falseFocus",
                      "focus": "HvFocus-focus HvListItem-focus",
                      "focusDisabled": "HvFocus-focusDisabled",
                      "focused": "HvFocus-focused",
                      "root": "HvFocus-root",
                      "selected": "HvFocus-selected",
                    }
                  }
                  configuration={
                    Object {
                      "tabIndex": 0,
                    }
                  }
                  rootRef={
                    Object {
                      "current": <ul
                        class="HvNavigationAnchors-root HvListContainer-root"
                      >
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                          tabindex="0"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option1
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option2
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option3
                          </div>
                        </li>
                      </ul>,
                    }
                  }
                  selected={true}
                  strategy="menu"
                >
                  <ConditionalWrapper
                    condition={false}
                    wrapper={[Function]}
                  >
                    <li
                      className="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      selected={true}
                    >
                      <Component>
                        <WithStyles(ForwardRef)
                          disableFocusListener={true}
                          disableHoverListener={false}
                          disableTouchListener={true}
                          open={false}
                          placement="top"
                          style={
                            Object {
                              "overflow": "hidden",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                            }
                          }
                          title={
                            <WithStyles(ForwardRef)>
                              Option1
                            </WithStyles(ForwardRef)>
                          }
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "color": "HvTooltip-color",
                                "popper": "HvTooltip-popper",
                                "root": "HvTooltip-root",
                                "separator": "HvTooltip-separator",
                                "separatorColor": "HvTooltip-separatorColor",
                                "title": "HvTooltip-title",
                                "tooltip": "HvTooltip-tooltip",
                                "tooltipMulti": "HvTooltip-tooltipMulti",
                                "valueWrapper": "HvTooltip-valueWrapper",
                                "values": "HvTooltip-values",
                                "valuesContainer": "HvTooltip-valuesContainer",
                              }
                            }
                            disableFocusListener={true}
                            disableHoverListener={false}
                            disableTouchListener={true}
                            open={false}
                            placement="top"
                            style={
                              Object {
                                "overflow": "hidden",
                                "textOverflow": "ellipsis",
                                "whiteSpace": "nowrap",
                              }
                            }
                            title={
                              <WithStyles(ForwardRef)>
                                Option1
                              </WithStyles(ForwardRef)>
                            }
                          >
                            <ForwardRef(Tooltip)
                              TransitionComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "addEndListener": [Function],
                                    "appear": [Function],
                                    "children": [Function],
                                    "easing": [Function],
                                    "in": [Function],
                                    "onEnter": [Function],
                                    "onEntered": [Function],
                                    "onEntering": [Function],
                                    "onExit": [Function],
                                    "onExited": [Function],
                                    "onExiting": [Function],
                                    "style": [Function],
                                    "timeout": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              TransitionProps={
                                Object {
                                  "timeout": 400,
                                }
                              }
                              classes={
                                Object {
                                  "popper": "HvTooltip-popper",
                                  "tooltip": "HvTooltip-tooltip",
                                }
                              }
                              disableFocusListener={true}
                              disableHoverListener={false}
                              disableTouchListener={true}
                              enterDelay={300}
                              open={false}
                              placement="top"
                              style={
                                Object {
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                }
                              }
                              title={
                                <WithStyles(ForwardRef)>
                                  Option1
                                </WithStyles(ForwardRef)>
                              }
                            >
                              <div
                                aria-label={null}
                                aria-labelledby={null}
                                className=""
                                data-mui-internal-clone-element={true}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseOver={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "overflow": "hidden",
                                    "textOverflow": "ellipsis",
                                    "whiteSpace": "nowrap",
                                  }
                                }
                              >
                                <ComponentFunction>
                                  Option1
                                </ComponentFunction>
                              </div>
                              <MuiTooltipPopper
                                anchorEl={
                                  <div
                                    class=""
                                    data-mui-internal-clone-element="true"
                                    style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                  >
                                    Option1
                                  </div>
                                }
                                as={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "anchorEl": [Function],
                                      "children": [Function],
                                      "component": [Function],
                                      "components": [Function],
                                      "componentsProps": [Function],
                                      "container": [Function],
                                      "disablePortal": [Function],
                                      "keepMounted": [Function],
                                      "modifiers": [Function],
                                      "open": [Function],
                                      "placement": [Function],
                                      "popperOptions": [Function],
                                      "popperRef": [Function],
                                      "sx": [Function],
                                      "transition": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive"
                                id="mui-4"
                                onMouseLeave={[Function]}
                                onMouseOver={[Function]}
                                open={false}
                                ownerState={
                                  Object {
                                    "PopperComponentProp": undefined,
                                    "TransitionComponent": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "addEndListener": [Function],
                                        "appear": [Function],
                                        "children": [Function],
                                        "easing": [Function],
                                        "in": [Function],
                                        "onEnter": [Function],
                                        "onEntered": [Function],
                                        "onEntering": [Function],
                                        "onExit": [Function],
                                        "onExited": [Function],
                                        "onExiting": [Function],
                                        "style": [Function],
                                        "timeout": [Function],
                                      },
                                      "render": [Function],
                                    },
                                    "TransitionProps": Object {
                                      "timeout": 400,
                                    },
                                    "arrow": false,
                                    "children": <div
                                      onMouseEnter={[Function]}
                                      onMouseLeave={[Function]}
                                    >
                                      <ComponentFunction />
                                    </div>,
                                    "className": undefined,
                                    "classes": Object {
                                      "popper": "HvTooltip-popper",
                                      "tooltip": "HvTooltip-tooltip",
                                    },
                                    "disableFocusListener": true,
                                    "disableHoverListener": false,
                                    "disableInteractive": false,
                                    "disableTouchListener": true,
                                    "enterDelay": 300,
                                    "isRtl": false,
                                    "open": false,
                                    "placement": "top",
                                    "style": Object {
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    },
                                    "title": <WithStyles(ForwardRef)>
                                      Option1
                                    </WithStyles(ForwardRef)>,
                                    "touch": false,
                                  }
                                }
                                placement="top"
                                popperOptions={
                                  Object {
                                    "modifiers": Array [
                                      Object {
                                        "enabled": false,
                                        "name": "arrow",
                                        "options": Object {
                                          "element": null,
                                          "padding": 4,
                                        },
                                      },
                                    ],
                                  }
                                }
                                popperRef={
                                  Object {
                                    "current": undefined,
                                  }
                                }
                                transition={true}
                              >
                                <Insertion
                                  cache={
                                    Object {
                                      "insert": [Function],
                                      "inserted": Object {
                                        "1433tg5-MuiTooltip-popper": true,
                                        "179vq5o-MuiPopper-root-MuiTooltip-popper": true,
                                      },
                                      "key": "css",
                                      "nonce": undefined,
                                      "registered": Object {
                                        "css-1433tg5-MuiTooltip-popper": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                        "css-179vq5o-MuiPopper-root-MuiTooltip-popper": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                      },
                                      "sheet": StyleSheet {
                                        "_alreadyInsertedOrderInsensitiveRule": true,
                                        "_insertTag": [Function],
                                        "before": null,
                                        "container": <head>
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvFocus"
                                          >
                                            
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvFocus"
                                          >
                                            
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListContainer"
                                          >
                                            
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListContainer"
                                          >
                                            
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListItem"
                                          >
                                            
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListItem"
                                          >
                                            
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvTooltip"
                                          >
                                            
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvTooltip"
                                          >
                                            
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvNavigationAnchors"
                                          >
                                            
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvNavigationAnchors"
                                          >
                                            
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                          </style>
                                        </head>,
                                        "ctr": 2,
                                        "insertionPoint": undefined,
                                        "isSpeedy": false,
                                        "key": "css",
                                        "nonce": undefined,
                                        "prepend": true,
                                        "tags": Array [
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>,
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>,
                                        ],
                                      },
                                    }
                                  }
                                  isStringTag={false}
                                  serialized={
                                    Object {
                                      "map": undefined,
                                      "name": "1433tg5-MuiTooltip-popper",
                                      "next": undefined,
                                      "styles": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                      "toString": [Function],
                                    }
                                  }
                                />
                                <ForwardRef(Popper)
                                  anchorEl={
                                    <div
                                      class=""
                                      data-mui-internal-clone-element="true"
                                      style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                    >
                                      Option1
                                    </div>
                                  }
                                  className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-1433tg5-MuiTooltip-popper"
                                  id="mui-4"
                                  onMouseLeave={[Function]}
                                  onMouseOver={[Function]}
                                  open={false}
                                  placement="top"
                                  popperOptions={
                                    Object {
                                      "modifiers": Array [
                                        Object {
                                          "enabled": false,
                                          "name": "arrow",
                                          "options": Object {
                                            "element": null,
                                            "padding": 4,
                                          },
                                        },
                                      ],
                                    }
                                  }
                                  popperRef={
                                    Object {
                                      "current": undefined,
                                    }
                                  }
                                  transition={true}
                                >
                                  <MuiPopperRoot
                                    anchorEl={
                                      <div
                                        class=""
                                        data-mui-internal-clone-element="true"
                                        style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                      >
                                        Option1
                                      </div>
                                    }
                                    className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-1433tg5-MuiTooltip-popper"
                                    direction="ltr"
                                    id="mui-4"
                                    onMouseLeave={[Function]}
                                    onMouseOver={[Function]}
                                    open={false}
                                    placement="top"
                                    popperOptions={
                                      Object {
                                        "modifiers": Array [
                                          Object {
                                            "enabled": false,
                                            "name": "arrow",
                                            "options": Object {
                                              "element": null,
                                              "padding": 4,
                                            },
                                          },
                                        ],
                                      }
                                    }
                                    popperRef={
                                      Object {
                                        "current": undefined,
                                      }
                                    }
                                    transition={true}
                                  >
                                    <Insertion
                                      cache={
                                        Object {
                                          "insert": [Function],
                                          "inserted": Object {
                                            "1433tg5-MuiTooltip-popper": true,
                                            "179vq5o-MuiPopper-root-MuiTooltip-popper": true,
                                          },
                                          "key": "css",
                                          "nonce": undefined,
                                          "registered": Object {
                                            "css-1433tg5-MuiTooltip-popper": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                            "css-179vq5o-MuiPopper-root-MuiTooltip-popper": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                          },
                                          "sheet": StyleSheet {
                                            "_alreadyInsertedOrderInsensitiveRule": true,
                                            "_insertTag": [Function],
                                            "before": null,
                                            "container": <head>
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvFocus"
                                              >
                                                
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvFocus"
                                              >
                                                
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListContainer"
                                              >
                                                
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListContainer"
                                              >
                                                
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListItem"
                                              >
                                                
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListItem"
                                              >
                                                
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvTooltip"
                                              >
                                                
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvTooltip"
                                              >
                                                
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvNavigationAnchors"
                                              >
                                                
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvNavigationAnchors"
                                              >
                                                
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                              </style>
                                            </head>,
                                            "ctr": 2,
                                            "insertionPoint": undefined,
                                            "isSpeedy": false,
                                            "key": "css",
                                            "nonce": undefined,
                                            "prepend": true,
                                            "tags": Array [
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>,
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>,
                                            ],
                                          },
                                        }
                                      }
                                      isStringTag={false}
                                      serialized={
                                        Object {
                                          "map": undefined,
                                          "name": "179vq5o-MuiPopper-root-MuiTooltip-popper",
                                          "next": undefined,
                                          "styles": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                          "toString": [Function],
                                        }
                                      }
                                    />
                                    <ForwardRef(PopperUnstyled)
                                      anchorEl={
                                        <div
                                          class=""
                                          data-mui-internal-clone-element="true"
                                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                        >
                                          Option1
                                        </div>
                                      }
                                      className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-179vq5o-MuiPopper-root-MuiTooltip-popper"
                                      direction="ltr"
                                      id="mui-4"
                                      onMouseLeave={[Function]}
                                      onMouseOver={[Function]}
                                      open={false}
                                      placement="top"
                                      popperOptions={
                                        Object {
                                          "modifiers": Array [
                                            Object {
                                              "enabled": false,
                                              "name": "arrow",
                                              "options": Object {
                                                "element": null,
                                                "padding": 4,
                                              },
                                            },
                                          ],
                                        }
                                      }
                                      popperRef={
                                        Object {
                                          "current": undefined,
                                        }
                                      }
                                      transition={true}
                                    />
                                  </MuiPopperRoot>
                                </ForwardRef(Popper)>
                              </MuiTooltipPopper>
                            </ForwardRef(Tooltip)>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </Component>
                    </li>
                  </ConditionalWrapper>
                </Focus>
              </WithStyles(Focus)>
            </HvListItem>
          </WithStyles(HvListItem)>
          <WithStyles(HvListItem)
            classes={
              Object {
                "gutters": "HvNavigationAnchors-listItemGutters",
                "selected": "HvNavigationAnchors-listItemSelected",
              }
            }
            key=".$Option2"
            onClick={[Function]}
            selected={false}
            tabIndex={-1}
          >
            <HvListItem
              classes={
                Object {
                  "condensed": "HvListItem-condensed",
                  "disabled": "HvListItem-disabled",
                  "endAdornment": "HvListItem-endAdornment",
                  "focus": "HvListItem-focus",
                  "gutters": "HvListItem-gutters HvNavigationAnchors-listItemGutters",
                  "interactive": "HvListItem-interactive",
                  "root": "HvListItem-root",
                  "selected": "HvListItem-selected HvNavigationAnchors-listItemSelected",
                  "startAdornment": "HvListItem-startAdornment",
                  "withEndAdornment": "HvListItem-withEndAdornment",
                  "withStartAdornment": "HvListItem-withStartAdornment",
                }
              }
              onClick={[Function]}
              selected={false}
              tabIndex={-1}
            >
              <WithStyles(Focus)
                classes={
                  Object {
                    "focus": "HvListItem-focus",
                  }
                }
                configuration={
                  Object {
                    "tabIndex": -1,
                  }
                }
                rootRef={
                  Object {
                    "current": <ul
                      class="HvNavigationAnchors-root HvListContainer-root"
                    >
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                        tabindex="0"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option1
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option2
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option3
                        </div>
                      </li>
                    </ul>,
                  }
                }
                selected={false}
                strategy="menu"
              >
                <Focus
                  classes={
                    Object {
                      "disabled": "HvFocus-disabled",
                      "externalReference": "HvFocus-externalReference",
                      "falseFocus": "HvFocus-falseFocus",
                      "focus": "HvFocus-focus HvListItem-focus",
                      "focusDisabled": "HvFocus-focusDisabled",
                      "focused": "HvFocus-focused",
                      "root": "HvFocus-root",
                      "selected": "HvFocus-selected",
                    }
                  }
                  configuration={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  rootRef={
                    Object {
                      "current": <ul
                        class="HvNavigationAnchors-root HvListContainer-root"
                      >
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                          tabindex="0"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option1
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option2
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option3
                          </div>
                        </li>
                      </ul>,
                    }
                  }
                  selected={false}
                  strategy="menu"
                >
                  <ConditionalWrapper
                    condition={false}
                    wrapper={[Function]}
                  >
                    <li
                      className="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      selected={false}
                    >
                      <Component>
                        <WithStyles(ForwardRef)
                          disableFocusListener={true}
                          disableHoverListener={false}
                          disableTouchListener={true}
                          open={false}
                          placement="top"
                          style={
                            Object {
                              "overflow": "hidden",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                            }
                          }
                          title={
                            <WithStyles(ForwardRef)>
                              Option2
                            </WithStyles(ForwardRef)>
                          }
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "color": "HvTooltip-color",
                                "popper": "HvTooltip-popper",
                                "root": "HvTooltip-root",
                                "separator": "HvTooltip-separator",
                                "separatorColor": "HvTooltip-separatorColor",
                                "title": "HvTooltip-title",
                                "tooltip": "HvTooltip-tooltip",
                                "tooltipMulti": "HvTooltip-tooltipMulti",
                                "valueWrapper": "HvTooltip-valueWrapper",
                                "values": "HvTooltip-values",
                                "valuesContainer": "HvTooltip-valuesContainer",
                              }
                            }
                            disableFocusListener={true}
                            disableHoverListener={false}
                            disableTouchListener={true}
                            open={false}
                            placement="top"
                            style={
                              Object {
                                "overflow": "hidden",
                                "textOverflow": "ellipsis",
                                "whiteSpace": "nowrap",
                              }
                            }
                            title={
                              <WithStyles(ForwardRef)>
                                Option2
                              </WithStyles(ForwardRef)>
                            }
                          >
                            <ForwardRef(Tooltip)
                              TransitionComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "addEndListener": [Function],
                                    "appear": [Function],
                                    "children": [Function],
                                    "easing": [Function],
                                    "in": [Function],
                                    "onEnter": [Function],
                                    "onEntered": [Function],
                                    "onEntering": [Function],
                                    "onExit": [Function],
                                    "onExited": [Function],
                                    "onExiting": [Function],
                                    "style": [Function],
                                    "timeout": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              TransitionProps={
                                Object {
                                  "timeout": 400,
                                }
                              }
                              classes={
                                Object {
                                  "popper": "HvTooltip-popper",
                                  "tooltip": "HvTooltip-tooltip",
                                }
                              }
                              disableFocusListener={true}
                              disableHoverListener={false}
                              disableTouchListener={true}
                              enterDelay={300}
                              open={false}
                              placement="top"
                              style={
                                Object {
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                }
                              }
                              title={
                                <WithStyles(ForwardRef)>
                                  Option2
                                </WithStyles(ForwardRef)>
                              }
                            >
                              <div
                                aria-label={null}
                                aria-labelledby={null}
                                className=""
                                data-mui-internal-clone-element={true}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseOver={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "overflow": "hidden",
                                    "textOverflow": "ellipsis",
                                    "whiteSpace": "nowrap",
                                  }
                                }
                              >
                                <ComponentFunction>
                                  Option2
                                </ComponentFunction>
                              </div>
                              <MuiTooltipPopper
                                anchorEl={
                                  <div
                                    class=""
                                    data-mui-internal-clone-element="true"
                                    style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                  >
                                    Option2
                                  </div>
                                }
                                as={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "anchorEl": [Function],
                                      "children": [Function],
                                      "component": [Function],
                                      "components": [Function],
                                      "componentsProps": [Function],
                                      "container": [Function],
                                      "disablePortal": [Function],
                                      "keepMounted": [Function],
                                      "modifiers": [Function],
                                      "open": [Function],
                                      "placement": [Function],
                                      "popperOptions": [Function],
                                      "popperRef": [Function],
                                      "sx": [Function],
                                      "transition": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive"
                                id="mui-5"
                                onMouseLeave={[Function]}
                                onMouseOver={[Function]}
                                open={false}
                                ownerState={
                                  Object {
                                    "PopperComponentProp": undefined,
                                    "TransitionComponent": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "addEndListener": [Function],
                                        "appear": [Function],
                                        "children": [Function],
                                        "easing": [Function],
                                        "in": [Function],
                                        "onEnter": [Function],
                                        "onEntered": [Function],
                                        "onEntering": [Function],
                                        "onExit": [Function],
                                        "onExited": [Function],
                                        "onExiting": [Function],
                                        "style": [Function],
                                        "timeout": [Function],
                                      },
                                      "render": [Function],
                                    },
                                    "TransitionProps": Object {
                                      "timeout": 400,
                                    },
                                    "arrow": false,
                                    "children": <div
                                      onMouseEnter={[Function]}
                                      onMouseLeave={[Function]}
                                    >
                                      <ComponentFunction />
                                    </div>,
                                    "className": undefined,
                                    "classes": Object {
                                      "popper": "HvTooltip-popper",
                                      "tooltip": "HvTooltip-tooltip",
                                    },
                                    "disableFocusListener": true,
                                    "disableHoverListener": false,
                                    "disableInteractive": false,
                                    "disableTouchListener": true,
                                    "enterDelay": 300,
                                    "isRtl": false,
                                    "open": false,
                                    "placement": "top",
                                    "style": Object {
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    },
                                    "title": <WithStyles(ForwardRef)>
                                      Option2
                                    </WithStyles(ForwardRef)>,
                                    "touch": false,
                                  }
                                }
                                placement="top"
                                popperOptions={
                                  Object {
                                    "modifiers": Array [
                                      Object {
                                        "enabled": false,
                                        "name": "arrow",
                                        "options": Object {
                                          "element": null,
                                          "padding": 4,
                                        },
                                      },
                                    ],
                                  }
                                }
                                popperRef={
                                  Object {
                                    "current": undefined,
                                  }
                                }
                                transition={true}
                              >
                                <Insertion
                                  cache={
                                    Object {
                                      "insert": [Function],
                                      "inserted": Object {
                                        "1433tg5-MuiTooltip-popper": true,
                                        "179vq5o-MuiPopper-root-MuiTooltip-popper": true,
                                      },
                                      "key": "css",
                                      "nonce": undefined,
                                      "registered": Object {
                                        "css-1433tg5-MuiTooltip-popper": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                        "css-179vq5o-MuiPopper-root-MuiTooltip-popper": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                      },
                                      "sheet": StyleSheet {
                                        "_alreadyInsertedOrderInsensitiveRule": true,
                                        "_insertTag": [Function],
                                        "before": null,
                                        "container": <head>
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvFocus"
                                          >
                                            
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvFocus"
                                          >
                                            
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListContainer"
                                          >
                                            
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListContainer"
                                          >
                                            
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListItem"
                                          >
                                            
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListItem"
                                          >
                                            
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvTooltip"
                                          >
                                            
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvTooltip"
                                          >
                                            
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvNavigationAnchors"
                                          >
                                            
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvNavigationAnchors"
                                          >
                                            
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                          </style>
                                        </head>,
                                        "ctr": 2,
                                        "insertionPoint": undefined,
                                        "isSpeedy": false,
                                        "key": "css",
                                        "nonce": undefined,
                                        "prepend": true,
                                        "tags": Array [
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>,
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>,
                                        ],
                                      },
                                    }
                                  }
                                  isStringTag={false}
                                  serialized={
                                    Object {
                                      "map": undefined,
                                      "name": "1433tg5-MuiTooltip-popper",
                                      "next": undefined,
                                      "styles": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                      "toString": [Function],
                                    }
                                  }
                                />
                                <ForwardRef(Popper)
                                  anchorEl={
                                    <div
                                      class=""
                                      data-mui-internal-clone-element="true"
                                      style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                    >
                                      Option2
                                    </div>
                                  }
                                  className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-1433tg5-MuiTooltip-popper"
                                  id="mui-5"
                                  onMouseLeave={[Function]}
                                  onMouseOver={[Function]}
                                  open={false}
                                  placement="top"
                                  popperOptions={
                                    Object {
                                      "modifiers": Array [
                                        Object {
                                          "enabled": false,
                                          "name": "arrow",
                                          "options": Object {
                                            "element": null,
                                            "padding": 4,
                                          },
                                        },
                                      ],
                                    }
                                  }
                                  popperRef={
                                    Object {
                                      "current": undefined,
                                    }
                                  }
                                  transition={true}
                                >
                                  <MuiPopperRoot
                                    anchorEl={
                                      <div
                                        class=""
                                        data-mui-internal-clone-element="true"
                                        style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                      >
                                        Option2
                                      </div>
                                    }
                                    className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-1433tg5-MuiTooltip-popper"
                                    direction="ltr"
                                    id="mui-5"
                                    onMouseLeave={[Function]}
                                    onMouseOver={[Function]}
                                    open={false}
                                    placement="top"
                                    popperOptions={
                                      Object {
                                        "modifiers": Array [
                                          Object {
                                            "enabled": false,
                                            "name": "arrow",
                                            "options": Object {
                                              "element": null,
                                              "padding": 4,
                                            },
                                          },
                                        ],
                                      }
                                    }
                                    popperRef={
                                      Object {
                                        "current": undefined,
                                      }
                                    }
                                    transition={true}
                                  >
                                    <Insertion
                                      cache={
                                        Object {
                                          "insert": [Function],
                                          "inserted": Object {
                                            "1433tg5-MuiTooltip-popper": true,
                                            "179vq5o-MuiPopper-root-MuiTooltip-popper": true,
                                          },
                                          "key": "css",
                                          "nonce": undefined,
                                          "registered": Object {
                                            "css-1433tg5-MuiTooltip-popper": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                            "css-179vq5o-MuiPopper-root-MuiTooltip-popper": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                          },
                                          "sheet": StyleSheet {
                                            "_alreadyInsertedOrderInsensitiveRule": true,
                                            "_insertTag": [Function],
                                            "before": null,
                                            "container": <head>
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvFocus"
                                              >
                                                
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvFocus"
                                              >
                                                
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListContainer"
                                              >
                                                
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListContainer"
                                              >
                                                
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListItem"
                                              >
                                                
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListItem"
                                              >
                                                
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvTooltip"
                                              >
                                                
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvTooltip"
                                              >
                                                
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvNavigationAnchors"
                                              >
                                                
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvNavigationAnchors"
                                              >
                                                
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                              </style>
                                            </head>,
                                            "ctr": 2,
                                            "insertionPoint": undefined,
                                            "isSpeedy": false,
                                            "key": "css",
                                            "nonce": undefined,
                                            "prepend": true,
                                            "tags": Array [
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>,
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>,
                                            ],
                                          },
                                        }
                                      }
                                      isStringTag={false}
                                      serialized={
                                        Object {
                                          "map": undefined,
                                          "name": "179vq5o-MuiPopper-root-MuiTooltip-popper",
                                          "next": undefined,
                                          "styles": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                          "toString": [Function],
                                        }
                                      }
                                    />
                                    <ForwardRef(PopperUnstyled)
                                      anchorEl={
                                        <div
                                          class=""
                                          data-mui-internal-clone-element="true"
                                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                        >
                                          Option2
                                        </div>
                                      }
                                      className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-179vq5o-MuiPopper-root-MuiTooltip-popper"
                                      direction="ltr"
                                      id="mui-5"
                                      onMouseLeave={[Function]}
                                      onMouseOver={[Function]}
                                      open={false}
                                      placement="top"
                                      popperOptions={
                                        Object {
                                          "modifiers": Array [
                                            Object {
                                              "enabled": false,
                                              "name": "arrow",
                                              "options": Object {
                                                "element": null,
                                                "padding": 4,
                                              },
                                            },
                                          ],
                                        }
                                      }
                                      popperRef={
                                        Object {
                                          "current": undefined,
                                        }
                                      }
                                      transition={true}
                                    />
                                  </MuiPopperRoot>
                                </ForwardRef(Popper)>
                              </MuiTooltipPopper>
                            </ForwardRef(Tooltip)>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </Component>
                    </li>
                  </ConditionalWrapper>
                </Focus>
              </WithStyles(Focus)>
            </HvListItem>
          </WithStyles(HvListItem)>
          <WithStyles(HvListItem)
            classes={
              Object {
                "gutters": "HvNavigationAnchors-listItemGutters",
                "selected": "HvNavigationAnchors-listItemSelected",
              }
            }
            key=".$Option3"
            onClick={[Function]}
            selected={false}
            tabIndex={-1}
          >
            <HvListItem
              classes={
                Object {
                  "condensed": "HvListItem-condensed",
                  "disabled": "HvListItem-disabled",
                  "endAdornment": "HvListItem-endAdornment",
                  "focus": "HvListItem-focus",
                  "gutters": "HvListItem-gutters HvNavigationAnchors-listItemGutters",
                  "interactive": "HvListItem-interactive",
                  "root": "HvListItem-root",
                  "selected": "HvListItem-selected HvNavigationAnchors-listItemSelected",
                  "startAdornment": "HvListItem-startAdornment",
                  "withEndAdornment": "HvListItem-withEndAdornment",
                  "withStartAdornment": "HvListItem-withStartAdornment",
                }
              }
              onClick={[Function]}
              selected={false}
              tabIndex={-1}
            >
              <WithStyles(Focus)
                classes={
                  Object {
                    "focus": "HvListItem-focus",
                  }
                }
                configuration={
                  Object {
                    "tabIndex": -1,
                  }
                }
                rootRef={
                  Object {
                    "current": <ul
                      class="HvNavigationAnchors-root HvListContainer-root"
                    >
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                        tabindex="0"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option1
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option2
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option3
                        </div>
                      </li>
                    </ul>,
                  }
                }
                selected={false}
                strategy="menu"
              >
                <Focus
                  classes={
                    Object {
                      "disabled": "HvFocus-disabled",
                      "externalReference": "HvFocus-externalReference",
                      "falseFocus": "HvFocus-falseFocus",
                      "focus": "HvFocus-focus HvListItem-focus",
                      "focusDisabled": "HvFocus-focusDisabled",
                      "focused": "HvFocus-focused",
                      "root": "HvFocus-root",
                      "selected": "HvFocus-selected",
                    }
                  }
                  configuration={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  rootRef={
                    Object {
                      "current": <ul
                        class="HvNavigationAnchors-root HvListContainer-root"
                      >
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                          tabindex="0"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option1
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option2
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option3
                          </div>
                        </li>
                      </ul>,
                    }
                  }
                  selected={false}
                  strategy="menu"
                >
                  <ConditionalWrapper
                    condition={false}
                    wrapper={[Function]}
                  >
                    <li
                      className="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      selected={false}
                    >
                      <Component>
                        <WithStyles(ForwardRef)
                          disableFocusListener={true}
                          disableHoverListener={false}
                          disableTouchListener={true}
                          open={false}
                          placement="top"
                          style={
                            Object {
                              "overflow": "hidden",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                            }
                          }
                          title={
                            <WithStyles(ForwardRef)>
                              Option3
                            </WithStyles(ForwardRef)>
                          }
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "color": "HvTooltip-color",
                                "popper": "HvTooltip-popper",
                                "root": "HvTooltip-root",
                                "separator": "HvTooltip-separator",
                                "separatorColor": "HvTooltip-separatorColor",
                                "title": "HvTooltip-title",
                                "tooltip": "HvTooltip-tooltip",
                                "tooltipMulti": "HvTooltip-tooltipMulti",
                                "valueWrapper": "HvTooltip-valueWrapper",
                                "values": "HvTooltip-values",
                                "valuesContainer": "HvTooltip-valuesContainer",
                              }
                            }
                            disableFocusListener={true}
                            disableHoverListener={false}
                            disableTouchListener={true}
                            open={false}
                            placement="top"
                            style={
                              Object {
                                "overflow": "hidden",
                                "textOverflow": "ellipsis",
                                "whiteSpace": "nowrap",
                              }
                            }
                            title={
                              <WithStyles(ForwardRef)>
                                Option3
                              </WithStyles(ForwardRef)>
                            }
                          >
                            <ForwardRef(Tooltip)
                              TransitionComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "addEndListener": [Function],
                                    "appear": [Function],
                                    "children": [Function],
                                    "easing": [Function],
                                    "in": [Function],
                                    "onEnter": [Function],
                                    "onEntered": [Function],
                                    "onEntering": [Function],
                                    "onExit": [Function],
                                    "onExited": [Function],
                                    "onExiting": [Function],
                                    "style": [Function],
                                    "timeout": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              TransitionProps={
                                Object {
                                  "timeout": 400,
                                }
                              }
                              classes={
                                Object {
                                  "popper": "HvTooltip-popper",
                                  "tooltip": "HvTooltip-tooltip",
                                }
                              }
                              disableFocusListener={true}
                              disableHoverListener={false}
                              disableTouchListener={true}
                              enterDelay={300}
                              open={false}
                              placement="top"
                              style={
                                Object {
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                }
                              }
                              title={
                                <WithStyles(ForwardRef)>
                                  Option3
                                </WithStyles(ForwardRef)>
                              }
                            >
                              <div
                                aria-label={null}
                                aria-labelledby={null}
                                className=""
                                data-mui-internal-clone-element={true}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseOver={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "overflow": "hidden",
                                    "textOverflow": "ellipsis",
                                    "whiteSpace": "nowrap",
                                  }
                                }
                              >
                                <ComponentFunction>
                                  Option3
                                </ComponentFunction>
                              </div>
                              <MuiTooltipPopper
                                anchorEl={
                                  <div
                                    class=""
                                    data-mui-internal-clone-element="true"
                                    style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                  >
                                    Option3
                                  </div>
                                }
                                as={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "anchorEl": [Function],
                                      "children": [Function],
                                      "component": [Function],
                                      "components": [Function],
                                      "componentsProps": [Function],
                                      "container": [Function],
                                      "disablePortal": [Function],
                                      "keepMounted": [Function],
                                      "modifiers": [Function],
                                      "open": [Function],
                                      "placement": [Function],
                                      "popperOptions": [Function],
                                      "popperRef": [Function],
                                      "sx": [Function],
                                      "transition": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive"
                                id="mui-6"
                                onMouseLeave={[Function]}
                                onMouseOver={[Function]}
                                open={false}
                                ownerState={
                                  Object {
                                    "PopperComponentProp": undefined,
                                    "TransitionComponent": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "addEndListener": [Function],
                                        "appear": [Function],
                                        "children": [Function],
                                        "easing": [Function],
                                        "in": [Function],
                                        "onEnter": [Function],
                                        "onEntered": [Function],
                                        "onEntering": [Function],
                                        "onExit": [Function],
                                        "onExited": [Function],
                                        "onExiting": [Function],
                                        "style": [Function],
                                        "timeout": [Function],
                                      },
                                      "render": [Function],
                                    },
                                    "TransitionProps": Object {
                                      "timeout": 400,
                                    },
                                    "arrow": false,
                                    "children": <div
                                      onMouseEnter={[Function]}
                                      onMouseLeave={[Function]}
                                    >
                                      <ComponentFunction />
                                    </div>,
                                    "className": undefined,
                                    "classes": Object {
                                      "popper": "HvTooltip-popper",
                                      "tooltip": "HvTooltip-tooltip",
                                    },
                                    "disableFocusListener": true,
                                    "disableHoverListener": false,
                                    "disableInteractive": false,
                                    "disableTouchListener": true,
                                    "enterDelay": 300,
                                    "isRtl": false,
                                    "open": false,
                                    "placement": "top",
                                    "style": Object {
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    },
                                    "title": <WithStyles(ForwardRef)>
                                      Option3
                                    </WithStyles(ForwardRef)>,
                                    "touch": false,
                                  }
                                }
                                placement="top"
                                popperOptions={
                                  Object {
                                    "modifiers": Array [
                                      Object {
                                        "enabled": false,
                                        "name": "arrow",
                                        "options": Object {
                                          "element": null,
                                          "padding": 4,
                                        },
                                      },
                                    ],
                                  }
                                }
                                popperRef={
                                  Object {
                                    "current": undefined,
                                  }
                                }
                                transition={true}
                              >
                                <Insertion
                                  cache={
                                    Object {
                                      "insert": [Function],
                                      "inserted": Object {
                                        "1433tg5-MuiTooltip-popper": true,
                                        "179vq5o-MuiPopper-root-MuiTooltip-popper": true,
                                      },
                                      "key": "css",
                                      "nonce": undefined,
                                      "registered": Object {
                                        "css-1433tg5-MuiTooltip-popper": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                        "css-179vq5o-MuiPopper-root-MuiTooltip-popper": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                      },
                                      "sheet": StyleSheet {
                                        "_alreadyInsertedOrderInsensitiveRule": true,
                                        "_insertTag": [Function],
                                        "before": null,
                                        "container": <head>
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvFocus"
                                          >
                                            
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvFocus"
                                          >
                                            
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListContainer"
                                          >
                                            
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListContainer"
                                          >
                                            
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListItem"
                                          >
                                            
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListItem"
                                          >
                                            
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvTooltip"
                                          >
                                            
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvTooltip"
                                          >
                                            
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvNavigationAnchors"
                                          >
                                            
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvNavigationAnchors"
                                          >
                                            
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                          </style>
                                        </head>,
                                        "ctr": 2,
                                        "insertionPoint": undefined,
                                        "isSpeedy": false,
                                        "key": "css",
                                        "nonce": undefined,
                                        "prepend": true,
                                        "tags": Array [
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>,
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>,
                                        ],
                                      },
                                    }
                                  }
                                  isStringTag={false}
                                  serialized={
                                    Object {
                                      "map": undefined,
                                      "name": "1433tg5-MuiTooltip-popper",
                                      "next": undefined,
                                      "styles": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                      "toString": [Function],
                                    }
                                  }
                                />
                                <ForwardRef(Popper)
                                  anchorEl={
                                    <div
                                      class=""
                                      data-mui-internal-clone-element="true"
                                      style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                    >
                                      Option3
                                    </div>
                                  }
                                  className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-1433tg5-MuiTooltip-popper"
                                  id="mui-6"
                                  onMouseLeave={[Function]}
                                  onMouseOver={[Function]}
                                  open={false}
                                  placement="top"
                                  popperOptions={
                                    Object {
                                      "modifiers": Array [
                                        Object {
                                          "enabled": false,
                                          "name": "arrow",
                                          "options": Object {
                                            "element": null,
                                            "padding": 4,
                                          },
                                        },
                                      ],
                                    }
                                  }
                                  popperRef={
                                    Object {
                                      "current": undefined,
                                    }
                                  }
                                  transition={true}
                                >
                                  <MuiPopperRoot
                                    anchorEl={
                                      <div
                                        class=""
                                        data-mui-internal-clone-element="true"
                                        style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                      >
                                        Option3
                                      </div>
                                    }
                                    className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-1433tg5-MuiTooltip-popper"
                                    direction="ltr"
                                    id="mui-6"
                                    onMouseLeave={[Function]}
                                    onMouseOver={[Function]}
                                    open={false}
                                    placement="top"
                                    popperOptions={
                                      Object {
                                        "modifiers": Array [
                                          Object {
                                            "enabled": false,
                                            "name": "arrow",
                                            "options": Object {
                                              "element": null,
                                              "padding": 4,
                                            },
                                          },
                                        ],
                                      }
                                    }
                                    popperRef={
                                      Object {
                                        "current": undefined,
                                      }
                                    }
                                    transition={true}
                                  >
                                    <Insertion
                                      cache={
                                        Object {
                                          "insert": [Function],
                                          "inserted": Object {
                                            "1433tg5-MuiTooltip-popper": true,
                                            "179vq5o-MuiPopper-root-MuiTooltip-popper": true,
                                          },
                                          "key": "css",
                                          "nonce": undefined,
                                          "registered": Object {
                                            "css-1433tg5-MuiTooltip-popper": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                            "css-179vq5o-MuiPopper-root-MuiTooltip-popper": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                          },
                                          "sheet": StyleSheet {
                                            "_alreadyInsertedOrderInsensitiveRule": true,
                                            "_insertTag": [Function],
                                            "before": null,
                                            "container": <head>
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvFocus"
                                              >
                                                
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvFocus"
                                              >
                                                
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListContainer"
                                              >
                                                
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListContainer"
                                              >
                                                
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListItem"
                                              >
                                                
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListItem"
                                              >
                                                
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvTooltip"
                                              >
                                                
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvTooltip"
                                              >
                                                
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvNavigationAnchors"
                                              >
                                                
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvNavigationAnchors"
                                              >
                                                
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                              </style>
                                            </head>,
                                            "ctr": 2,
                                            "insertionPoint": undefined,
                                            "isSpeedy": false,
                                            "key": "css",
                                            "nonce": undefined,
                                            "prepend": true,
                                            "tags": Array [
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>,
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>,
                                            ],
                                          },
                                        }
                                      }
                                      isStringTag={false}
                                      serialized={
                                        Object {
                                          "map": undefined,
                                          "name": "179vq5o-MuiPopper-root-MuiTooltip-popper",
                                          "next": undefined,
                                          "styles": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                          "toString": [Function],
                                        }
                                      }
                                    />
                                    <ForwardRef(PopperUnstyled)
                                      anchorEl={
                                        <div
                                          class=""
                                          data-mui-internal-clone-element="true"
                                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                        >
                                          Option3
                                        </div>
                                      }
                                      className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-179vq5o-MuiPopper-root-MuiTooltip-popper"
                                      direction="ltr"
                                      id="mui-6"
                                      onMouseLeave={[Function]}
                                      onMouseOver={[Function]}
                                      open={false}
                                      placement="top"
                                      popperOptions={
                                        Object {
                                          "modifiers": Array [
                                            Object {
                                              "enabled": false,
                                              "name": "arrow",
                                              "options": Object {
                                                "element": null,
                                                "padding": 4,
                                              },
                                            },
                                          ],
                                        }
                                      }
                                      popperRef={
                                        Object {
                                          "current": undefined,
                                        }
                                      }
                                      transition={true}
                                    />
                                  </MuiPopperRoot>
                                </ForwardRef(Popper)>
                              </MuiTooltipPopper>
                            </ForwardRef(Tooltip)>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </Component>
                    </li>
                  </ConditionalWrapper>
                </Focus>
              </WithStyles(Focus)>
            </HvListItem>
          </WithStyles(HvListItem)>
        </ul>
      </ForwardRef>
    </WithStyles(ForwardRef)>
  </NavigationAnchors>
</WithStyles(NavigationAnchors)>
`;

exports[`User withStyles should render correctly 1`] = `
<WithStyles(NavigationAnchors)
  options={
    Array [
      Object {
        "label": "Option1",
        "value": "Value1",
      },
      Object {
        "label": "Option2",
        "value": "Value2",
      },
      Object {
        "label": "Option3",
        "value": "Value3",
      },
    ]
  }
/>
`;

exports[`User withStyles should render correctly with props 1`] = `
<WithStyles(NavigationAnchors)
  options={
    Array [
      Object {
        "label": "Option1",
        "value": "Value1",
      },
      Object {
        "label": "Option2",
        "value": "Value2",
      },
      Object {
        "label": "Option3",
        "value": "Value3",
      },
    ]
  }
>
  <NavigationAnchors
    classes={
      Object {
        "listItemGutters": "HvNavigationAnchors-listItemGutters",
        "listItemSelected": "HvNavigationAnchors-listItemSelected",
        "root": "HvNavigationAnchors-root",
      }
    }
    options={
      Array [
        Object {
          "label": "Option1",
          "value": "Value1",
        },
        Object {
          "label": "Option2",
          "value": "Value2",
        },
        Object {
          "label": "Option3",
          "value": "Value3",
        },
      ]
    }
  >
    <WithStyles(ForwardRef)
      className="HvNavigationAnchors-root"
      interactive={true}
    >
      <ForwardRef
        className="HvNavigationAnchors-root"
        classes={
          Object {
            "root": "HvListContainer-root",
          }
        }
        interactive={true}
      >
        <ul
          className="HvNavigationAnchors-root HvListContainer-root"
        >
          <WithStyles(HvListItem)
            classes={
              Object {
                "gutters": "HvNavigationAnchors-listItemGutters",
                "selected": "HvNavigationAnchors-listItemSelected",
              }
            }
            key=".$Option1"
            onClick={[Function]}
            selected={true}
            tabIndex={0}
          >
            <HvListItem
              classes={
                Object {
                  "condensed": "HvListItem-condensed",
                  "disabled": "HvListItem-disabled",
                  "endAdornment": "HvListItem-endAdornment",
                  "focus": "HvListItem-focus",
                  "gutters": "HvListItem-gutters HvNavigationAnchors-listItemGutters",
                  "interactive": "HvListItem-interactive",
                  "root": "HvListItem-root",
                  "selected": "HvListItem-selected HvNavigationAnchors-listItemSelected",
                  "startAdornment": "HvListItem-startAdornment",
                  "withEndAdornment": "HvListItem-withEndAdornment",
                  "withStartAdornment": "HvListItem-withStartAdornment",
                }
              }
              onClick={[Function]}
              selected={true}
              tabIndex={0}
            >
              <WithStyles(Focus)
                classes={
                  Object {
                    "focus": "HvListItem-focus",
                  }
                }
                configuration={
                  Object {
                    "tabIndex": 0,
                  }
                }
                rootRef={
                  Object {
                    "current": <ul
                      class="HvNavigationAnchors-root HvListContainer-root"
                    >
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                        tabindex="0"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option1
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option2
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option3
                        </div>
                      </li>
                    </ul>,
                  }
                }
                selected={true}
                strategy="menu"
              >
                <Focus
                  classes={
                    Object {
                      "disabled": "HvFocus-disabled",
                      "externalReference": "HvFocus-externalReference",
                      "falseFocus": "HvFocus-falseFocus",
                      "focus": "HvFocus-focus HvListItem-focus",
                      "focusDisabled": "HvFocus-focusDisabled",
                      "focused": "HvFocus-focused",
                      "root": "HvFocus-root",
                      "selected": "HvFocus-selected",
                    }
                  }
                  configuration={
                    Object {
                      "tabIndex": 0,
                    }
                  }
                  rootRef={
                    Object {
                      "current": <ul
                        class="HvNavigationAnchors-root HvListContainer-root"
                      >
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                          tabindex="0"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option1
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option2
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option3
                          </div>
                        </li>
                      </ul>,
                    }
                  }
                  selected={true}
                  strategy="menu"
                >
                  <ConditionalWrapper
                    condition={false}
                    wrapper={[Function]}
                  >
                    <li
                      className="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      selected={true}
                    >
                      <Component>
                        <WithStyles(ForwardRef)
                          disableFocusListener={true}
                          disableHoverListener={false}
                          disableTouchListener={true}
                          open={false}
                          placement="top"
                          style={
                            Object {
                              "overflow": "hidden",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                            }
                          }
                          title={
                            <WithStyles(ForwardRef)>
                              Option1
                            </WithStyles(ForwardRef)>
                          }
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "color": "HvTooltip-color",
                                "popper": "HvTooltip-popper",
                                "root": "HvTooltip-root",
                                "separator": "HvTooltip-separator",
                                "separatorColor": "HvTooltip-separatorColor",
                                "title": "HvTooltip-title",
                                "tooltip": "HvTooltip-tooltip",
                                "tooltipMulti": "HvTooltip-tooltipMulti",
                                "valueWrapper": "HvTooltip-valueWrapper",
                                "values": "HvTooltip-values",
                                "valuesContainer": "HvTooltip-valuesContainer",
                              }
                            }
                            disableFocusListener={true}
                            disableHoverListener={false}
                            disableTouchListener={true}
                            open={false}
                            placement="top"
                            style={
                              Object {
                                "overflow": "hidden",
                                "textOverflow": "ellipsis",
                                "whiteSpace": "nowrap",
                              }
                            }
                            title={
                              <WithStyles(ForwardRef)>
                                Option1
                              </WithStyles(ForwardRef)>
                            }
                          >
                            <ForwardRef(Tooltip)
                              TransitionComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "addEndListener": [Function],
                                    "appear": [Function],
                                    "children": [Function],
                                    "easing": [Function],
                                    "in": [Function],
                                    "onEnter": [Function],
                                    "onEntered": [Function],
                                    "onEntering": [Function],
                                    "onExit": [Function],
                                    "onExited": [Function],
                                    "onExiting": [Function],
                                    "style": [Function],
                                    "timeout": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              TransitionProps={
                                Object {
                                  "timeout": 400,
                                }
                              }
                              classes={
                                Object {
                                  "popper": "HvTooltip-popper",
                                  "tooltip": "HvTooltip-tooltip",
                                }
                              }
                              disableFocusListener={true}
                              disableHoverListener={false}
                              disableTouchListener={true}
                              enterDelay={300}
                              open={false}
                              placement="top"
                              style={
                                Object {
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                }
                              }
                              title={
                                <WithStyles(ForwardRef)>
                                  Option1
                                </WithStyles(ForwardRef)>
                              }
                            >
                              <div
                                aria-label={null}
                                aria-labelledby={null}
                                className=""
                                data-mui-internal-clone-element={true}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseOver={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "overflow": "hidden",
                                    "textOverflow": "ellipsis",
                                    "whiteSpace": "nowrap",
                                  }
                                }
                              >
                                <ComponentFunction>
                                  Option1
                                </ComponentFunction>
                              </div>
                              <MuiTooltipPopper
                                anchorEl={
                                  <div
                                    class=""
                                    data-mui-internal-clone-element="true"
                                    style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                  >
                                    Option1
                                  </div>
                                }
                                as={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "anchorEl": [Function],
                                      "children": [Function],
                                      "component": [Function],
                                      "components": [Function],
                                      "componentsProps": [Function],
                                      "container": [Function],
                                      "disablePortal": [Function],
                                      "keepMounted": [Function],
                                      "modifiers": [Function],
                                      "open": [Function],
                                      "placement": [Function],
                                      "popperOptions": [Function],
                                      "popperRef": [Function],
                                      "sx": [Function],
                                      "transition": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive"
                                id="mui-1"
                                onMouseLeave={[Function]}
                                onMouseOver={[Function]}
                                open={false}
                                ownerState={
                                  Object {
                                    "PopperComponentProp": undefined,
                                    "TransitionComponent": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "addEndListener": [Function],
                                        "appear": [Function],
                                        "children": [Function],
                                        "easing": [Function],
                                        "in": [Function],
                                        "onEnter": [Function],
                                        "onEntered": [Function],
                                        "onEntering": [Function],
                                        "onExit": [Function],
                                        "onExited": [Function],
                                        "onExiting": [Function],
                                        "style": [Function],
                                        "timeout": [Function],
                                      },
                                      "render": [Function],
                                    },
                                    "TransitionProps": Object {
                                      "timeout": 400,
                                    },
                                    "arrow": false,
                                    "children": <div
                                      onMouseEnter={[Function]}
                                      onMouseLeave={[Function]}
                                    >
                                      <ComponentFunction />
                                    </div>,
                                    "className": undefined,
                                    "classes": Object {
                                      "popper": "HvTooltip-popper",
                                      "tooltip": "HvTooltip-tooltip",
                                    },
                                    "disableFocusListener": true,
                                    "disableHoverListener": false,
                                    "disableInteractive": false,
                                    "disableTouchListener": true,
                                    "enterDelay": 300,
                                    "isRtl": false,
                                    "open": false,
                                    "placement": "top",
                                    "style": Object {
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    },
                                    "title": <WithStyles(ForwardRef)>
                                      Option1
                                    </WithStyles(ForwardRef)>,
                                    "touch": false,
                                  }
                                }
                                placement="top"
                                popperOptions={
                                  Object {
                                    "modifiers": Array [
                                      Object {
                                        "enabled": false,
                                        "name": "arrow",
                                        "options": Object {
                                          "element": null,
                                          "padding": 4,
                                        },
                                      },
                                    ],
                                  }
                                }
                                popperRef={
                                  Object {
                                    "current": undefined,
                                  }
                                }
                                transition={true}
                              >
                                <Insertion
                                  cache={
                                    Object {
                                      "insert": [Function],
                                      "inserted": Object {
                                        "1433tg5-MuiTooltip-popper": true,
                                        "179vq5o-MuiPopper-root-MuiTooltip-popper": true,
                                      },
                                      "key": "css",
                                      "nonce": undefined,
                                      "registered": Object {
                                        "css-1433tg5-MuiTooltip-popper": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                        "css-179vq5o-MuiPopper-root-MuiTooltip-popper": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                      },
                                      "sheet": StyleSheet {
                                        "_alreadyInsertedOrderInsensitiveRule": true,
                                        "_insertTag": [Function],
                                        "before": null,
                                        "container": <head>
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvFocus"
                                          >
                                            
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListContainer"
                                          >
                                            
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListItem"
                                          >
                                            
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvTooltip"
                                          >
                                            
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvNavigationAnchors"
                                          >
                                            
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                          </style>
                                        </head>,
                                        "ctr": 2,
                                        "insertionPoint": undefined,
                                        "isSpeedy": false,
                                        "key": "css",
                                        "nonce": undefined,
                                        "prepend": true,
                                        "tags": Array [
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>,
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>,
                                        ],
                                      },
                                    }
                                  }
                                  isStringTag={false}
                                  serialized={
                                    Object {
                                      "map": undefined,
                                      "name": "1433tg5-MuiTooltip-popper",
                                      "next": undefined,
                                      "styles": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                      "toString": [Function],
                                    }
                                  }
                                />
                                <ForwardRef(Popper)
                                  anchorEl={
                                    <div
                                      class=""
                                      data-mui-internal-clone-element="true"
                                      style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                    >
                                      Option1
                                    </div>
                                  }
                                  className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-1433tg5-MuiTooltip-popper"
                                  id="mui-1"
                                  onMouseLeave={[Function]}
                                  onMouseOver={[Function]}
                                  open={false}
                                  placement="top"
                                  popperOptions={
                                    Object {
                                      "modifiers": Array [
                                        Object {
                                          "enabled": false,
                                          "name": "arrow",
                                          "options": Object {
                                            "element": null,
                                            "padding": 4,
                                          },
                                        },
                                      ],
                                    }
                                  }
                                  popperRef={
                                    Object {
                                      "current": undefined,
                                    }
                                  }
                                  transition={true}
                                >
                                  <MuiPopperRoot
                                    anchorEl={
                                      <div
                                        class=""
                                        data-mui-internal-clone-element="true"
                                        style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                      >
                                        Option1
                                      </div>
                                    }
                                    className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-1433tg5-MuiTooltip-popper"
                                    direction="ltr"
                                    id="mui-1"
                                    onMouseLeave={[Function]}
                                    onMouseOver={[Function]}
                                    open={false}
                                    placement="top"
                                    popperOptions={
                                      Object {
                                        "modifiers": Array [
                                          Object {
                                            "enabled": false,
                                            "name": "arrow",
                                            "options": Object {
                                              "element": null,
                                              "padding": 4,
                                            },
                                          },
                                        ],
                                      }
                                    }
                                    popperRef={
                                      Object {
                                        "current": undefined,
                                      }
                                    }
                                    transition={true}
                                  >
                                    <Insertion
                                      cache={
                                        Object {
                                          "insert": [Function],
                                          "inserted": Object {
                                            "1433tg5-MuiTooltip-popper": true,
                                            "179vq5o-MuiPopper-root-MuiTooltip-popper": true,
                                          },
                                          "key": "css",
                                          "nonce": undefined,
                                          "registered": Object {
                                            "css-1433tg5-MuiTooltip-popper": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                            "css-179vq5o-MuiPopper-root-MuiTooltip-popper": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                          },
                                          "sheet": StyleSheet {
                                            "_alreadyInsertedOrderInsensitiveRule": true,
                                            "_insertTag": [Function],
                                            "before": null,
                                            "container": <head>
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvFocus"
                                              >
                                                
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListContainer"
                                              >
                                                
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListItem"
                                              >
                                                
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvTooltip"
                                              >
                                                
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvNavigationAnchors"
                                              >
                                                
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                              </style>
                                            </head>,
                                            "ctr": 2,
                                            "insertionPoint": undefined,
                                            "isSpeedy": false,
                                            "key": "css",
                                            "nonce": undefined,
                                            "prepend": true,
                                            "tags": Array [
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>,
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>,
                                            ],
                                          },
                                        }
                                      }
                                      isStringTag={false}
                                      serialized={
                                        Object {
                                          "map": undefined,
                                          "name": "179vq5o-MuiPopper-root-MuiTooltip-popper",
                                          "next": undefined,
                                          "styles": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                          "toString": [Function],
                                        }
                                      }
                                    />
                                    <ForwardRef(PopperUnstyled)
                                      anchorEl={
                                        <div
                                          class=""
                                          data-mui-internal-clone-element="true"
                                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                        >
                                          Option1
                                        </div>
                                      }
                                      className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-179vq5o-MuiPopper-root-MuiTooltip-popper"
                                      direction="ltr"
                                      id="mui-1"
                                      onMouseLeave={[Function]}
                                      onMouseOver={[Function]}
                                      open={false}
                                      placement="top"
                                      popperOptions={
                                        Object {
                                          "modifiers": Array [
                                            Object {
                                              "enabled": false,
                                              "name": "arrow",
                                              "options": Object {
                                                "element": null,
                                                "padding": 4,
                                              },
                                            },
                                          ],
                                        }
                                      }
                                      popperRef={
                                        Object {
                                          "current": undefined,
                                        }
                                      }
                                      transition={true}
                                    />
                                  </MuiPopperRoot>
                                </ForwardRef(Popper)>
                              </MuiTooltipPopper>
                            </ForwardRef(Tooltip)>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </Component>
                    </li>
                  </ConditionalWrapper>
                </Focus>
              </WithStyles(Focus)>
            </HvListItem>
          </WithStyles(HvListItem)>
          <WithStyles(HvListItem)
            classes={
              Object {
                "gutters": "HvNavigationAnchors-listItemGutters",
                "selected": "HvNavigationAnchors-listItemSelected",
              }
            }
            key=".$Option2"
            onClick={[Function]}
            selected={false}
            tabIndex={-1}
          >
            <HvListItem
              classes={
                Object {
                  "condensed": "HvListItem-condensed",
                  "disabled": "HvListItem-disabled",
                  "endAdornment": "HvListItem-endAdornment",
                  "focus": "HvListItem-focus",
                  "gutters": "HvListItem-gutters HvNavigationAnchors-listItemGutters",
                  "interactive": "HvListItem-interactive",
                  "root": "HvListItem-root",
                  "selected": "HvListItem-selected HvNavigationAnchors-listItemSelected",
                  "startAdornment": "HvListItem-startAdornment",
                  "withEndAdornment": "HvListItem-withEndAdornment",
                  "withStartAdornment": "HvListItem-withStartAdornment",
                }
              }
              onClick={[Function]}
              selected={false}
              tabIndex={-1}
            >
              <WithStyles(Focus)
                classes={
                  Object {
                    "focus": "HvListItem-focus",
                  }
                }
                configuration={
                  Object {
                    "tabIndex": -1,
                  }
                }
                rootRef={
                  Object {
                    "current": <ul
                      class="HvNavigationAnchors-root HvListContainer-root"
                    >
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                        tabindex="0"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option1
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option2
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option3
                        </div>
                      </li>
                    </ul>,
                  }
                }
                selected={false}
                strategy="menu"
              >
                <Focus
                  classes={
                    Object {
                      "disabled": "HvFocus-disabled",
                      "externalReference": "HvFocus-externalReference",
                      "falseFocus": "HvFocus-falseFocus",
                      "focus": "HvFocus-focus HvListItem-focus",
                      "focusDisabled": "HvFocus-focusDisabled",
                      "focused": "HvFocus-focused",
                      "root": "HvFocus-root",
                      "selected": "HvFocus-selected",
                    }
                  }
                  configuration={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  rootRef={
                    Object {
                      "current": <ul
                        class="HvNavigationAnchors-root HvListContainer-root"
                      >
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                          tabindex="0"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option1
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option2
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option3
                          </div>
                        </li>
                      </ul>,
                    }
                  }
                  selected={false}
                  strategy="menu"
                >
                  <ConditionalWrapper
                    condition={false}
                    wrapper={[Function]}
                  >
                    <li
                      className="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      selected={false}
                    >
                      <Component>
                        <WithStyles(ForwardRef)
                          disableFocusListener={true}
                          disableHoverListener={false}
                          disableTouchListener={true}
                          open={false}
                          placement="top"
                          style={
                            Object {
                              "overflow": "hidden",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                            }
                          }
                          title={
                            <WithStyles(ForwardRef)>
                              Option2
                            </WithStyles(ForwardRef)>
                          }
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "color": "HvTooltip-color",
                                "popper": "HvTooltip-popper",
                                "root": "HvTooltip-root",
                                "separator": "HvTooltip-separator",
                                "separatorColor": "HvTooltip-separatorColor",
                                "title": "HvTooltip-title",
                                "tooltip": "HvTooltip-tooltip",
                                "tooltipMulti": "HvTooltip-tooltipMulti",
                                "valueWrapper": "HvTooltip-valueWrapper",
                                "values": "HvTooltip-values",
                                "valuesContainer": "HvTooltip-valuesContainer",
                              }
                            }
                            disableFocusListener={true}
                            disableHoverListener={false}
                            disableTouchListener={true}
                            open={false}
                            placement="top"
                            style={
                              Object {
                                "overflow": "hidden",
                                "textOverflow": "ellipsis",
                                "whiteSpace": "nowrap",
                              }
                            }
                            title={
                              <WithStyles(ForwardRef)>
                                Option2
                              </WithStyles(ForwardRef)>
                            }
                          >
                            <ForwardRef(Tooltip)
                              TransitionComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "addEndListener": [Function],
                                    "appear": [Function],
                                    "children": [Function],
                                    "easing": [Function],
                                    "in": [Function],
                                    "onEnter": [Function],
                                    "onEntered": [Function],
                                    "onEntering": [Function],
                                    "onExit": [Function],
                                    "onExited": [Function],
                                    "onExiting": [Function],
                                    "style": [Function],
                                    "timeout": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              TransitionProps={
                                Object {
                                  "timeout": 400,
                                }
                              }
                              classes={
                                Object {
                                  "popper": "HvTooltip-popper",
                                  "tooltip": "HvTooltip-tooltip",
                                }
                              }
                              disableFocusListener={true}
                              disableHoverListener={false}
                              disableTouchListener={true}
                              enterDelay={300}
                              open={false}
                              placement="top"
                              style={
                                Object {
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                }
                              }
                              title={
                                <WithStyles(ForwardRef)>
                                  Option2
                                </WithStyles(ForwardRef)>
                              }
                            >
                              <div
                                aria-label={null}
                                aria-labelledby={null}
                                className=""
                                data-mui-internal-clone-element={true}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseOver={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "overflow": "hidden",
                                    "textOverflow": "ellipsis",
                                    "whiteSpace": "nowrap",
                                  }
                                }
                              >
                                <ComponentFunction>
                                  Option2
                                </ComponentFunction>
                              </div>
                              <MuiTooltipPopper
                                anchorEl={
                                  <div
                                    class=""
                                    data-mui-internal-clone-element="true"
                                    style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                  >
                                    Option2
                                  </div>
                                }
                                as={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "anchorEl": [Function],
                                      "children": [Function],
                                      "component": [Function],
                                      "components": [Function],
                                      "componentsProps": [Function],
                                      "container": [Function],
                                      "disablePortal": [Function],
                                      "keepMounted": [Function],
                                      "modifiers": [Function],
                                      "open": [Function],
                                      "placement": [Function],
                                      "popperOptions": [Function],
                                      "popperRef": [Function],
                                      "sx": [Function],
                                      "transition": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive"
                                id="mui-2"
                                onMouseLeave={[Function]}
                                onMouseOver={[Function]}
                                open={false}
                                ownerState={
                                  Object {
                                    "PopperComponentProp": undefined,
                                    "TransitionComponent": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "addEndListener": [Function],
                                        "appear": [Function],
                                        "children": [Function],
                                        "easing": [Function],
                                        "in": [Function],
                                        "onEnter": [Function],
                                        "onEntered": [Function],
                                        "onEntering": [Function],
                                        "onExit": [Function],
                                        "onExited": [Function],
                                        "onExiting": [Function],
                                        "style": [Function],
                                        "timeout": [Function],
                                      },
                                      "render": [Function],
                                    },
                                    "TransitionProps": Object {
                                      "timeout": 400,
                                    },
                                    "arrow": false,
                                    "children": <div
                                      onMouseEnter={[Function]}
                                      onMouseLeave={[Function]}
                                    >
                                      <ComponentFunction />
                                    </div>,
                                    "className": undefined,
                                    "classes": Object {
                                      "popper": "HvTooltip-popper",
                                      "tooltip": "HvTooltip-tooltip",
                                    },
                                    "disableFocusListener": true,
                                    "disableHoverListener": false,
                                    "disableInteractive": false,
                                    "disableTouchListener": true,
                                    "enterDelay": 300,
                                    "isRtl": false,
                                    "open": false,
                                    "placement": "top",
                                    "style": Object {
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    },
                                    "title": <WithStyles(ForwardRef)>
                                      Option2
                                    </WithStyles(ForwardRef)>,
                                    "touch": false,
                                  }
                                }
                                placement="top"
                                popperOptions={
                                  Object {
                                    "modifiers": Array [
                                      Object {
                                        "enabled": false,
                                        "name": "arrow",
                                        "options": Object {
                                          "element": null,
                                          "padding": 4,
                                        },
                                      },
                                    ],
                                  }
                                }
                                popperRef={
                                  Object {
                                    "current": undefined,
                                  }
                                }
                                transition={true}
                              >
                                <Insertion
                                  cache={
                                    Object {
                                      "insert": [Function],
                                      "inserted": Object {
                                        "1433tg5-MuiTooltip-popper": true,
                                        "179vq5o-MuiPopper-root-MuiTooltip-popper": true,
                                      },
                                      "key": "css",
                                      "nonce": undefined,
                                      "registered": Object {
                                        "css-1433tg5-MuiTooltip-popper": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                        "css-179vq5o-MuiPopper-root-MuiTooltip-popper": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                      },
                                      "sheet": StyleSheet {
                                        "_alreadyInsertedOrderInsensitiveRule": true,
                                        "_insertTag": [Function],
                                        "before": null,
                                        "container": <head>
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvFocus"
                                          >
                                            
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListContainer"
                                          >
                                            
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListItem"
                                          >
                                            
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvTooltip"
                                          >
                                            
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvNavigationAnchors"
                                          >
                                            
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                          </style>
                                        </head>,
                                        "ctr": 2,
                                        "insertionPoint": undefined,
                                        "isSpeedy": false,
                                        "key": "css",
                                        "nonce": undefined,
                                        "prepend": true,
                                        "tags": Array [
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>,
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>,
                                        ],
                                      },
                                    }
                                  }
                                  isStringTag={false}
                                  serialized={
                                    Object {
                                      "map": undefined,
                                      "name": "1433tg5-MuiTooltip-popper",
                                      "next": undefined,
                                      "styles": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                      "toString": [Function],
                                    }
                                  }
                                />
                                <ForwardRef(Popper)
                                  anchorEl={
                                    <div
                                      class=""
                                      data-mui-internal-clone-element="true"
                                      style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                    >
                                      Option2
                                    </div>
                                  }
                                  className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-1433tg5-MuiTooltip-popper"
                                  id="mui-2"
                                  onMouseLeave={[Function]}
                                  onMouseOver={[Function]}
                                  open={false}
                                  placement="top"
                                  popperOptions={
                                    Object {
                                      "modifiers": Array [
                                        Object {
                                          "enabled": false,
                                          "name": "arrow",
                                          "options": Object {
                                            "element": null,
                                            "padding": 4,
                                          },
                                        },
                                      ],
                                    }
                                  }
                                  popperRef={
                                    Object {
                                      "current": undefined,
                                    }
                                  }
                                  transition={true}
                                >
                                  <MuiPopperRoot
                                    anchorEl={
                                      <div
                                        class=""
                                        data-mui-internal-clone-element="true"
                                        style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                      >
                                        Option2
                                      </div>
                                    }
                                    className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-1433tg5-MuiTooltip-popper"
                                    direction="ltr"
                                    id="mui-2"
                                    onMouseLeave={[Function]}
                                    onMouseOver={[Function]}
                                    open={false}
                                    placement="top"
                                    popperOptions={
                                      Object {
                                        "modifiers": Array [
                                          Object {
                                            "enabled": false,
                                            "name": "arrow",
                                            "options": Object {
                                              "element": null,
                                              "padding": 4,
                                            },
                                          },
                                        ],
                                      }
                                    }
                                    popperRef={
                                      Object {
                                        "current": undefined,
                                      }
                                    }
                                    transition={true}
                                  >
                                    <Insertion
                                      cache={
                                        Object {
                                          "insert": [Function],
                                          "inserted": Object {
                                            "1433tg5-MuiTooltip-popper": true,
                                            "179vq5o-MuiPopper-root-MuiTooltip-popper": true,
                                          },
                                          "key": "css",
                                          "nonce": undefined,
                                          "registered": Object {
                                            "css-1433tg5-MuiTooltip-popper": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                            "css-179vq5o-MuiPopper-root-MuiTooltip-popper": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                          },
                                          "sheet": StyleSheet {
                                            "_alreadyInsertedOrderInsensitiveRule": true,
                                            "_insertTag": [Function],
                                            "before": null,
                                            "container": <head>
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvFocus"
                                              >
                                                
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListContainer"
                                              >
                                                
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListItem"
                                              >
                                                
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvTooltip"
                                              >
                                                
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvNavigationAnchors"
                                              >
                                                
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                              </style>
                                            </head>,
                                            "ctr": 2,
                                            "insertionPoint": undefined,
                                            "isSpeedy": false,
                                            "key": "css",
                                            "nonce": undefined,
                                            "prepend": true,
                                            "tags": Array [
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>,
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>,
                                            ],
                                          },
                                        }
                                      }
                                      isStringTag={false}
                                      serialized={
                                        Object {
                                          "map": undefined,
                                          "name": "179vq5o-MuiPopper-root-MuiTooltip-popper",
                                          "next": undefined,
                                          "styles": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                          "toString": [Function],
                                        }
                                      }
                                    />
                                    <ForwardRef(PopperUnstyled)
                                      anchorEl={
                                        <div
                                          class=""
                                          data-mui-internal-clone-element="true"
                                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                        >
                                          Option2
                                        </div>
                                      }
                                      className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-179vq5o-MuiPopper-root-MuiTooltip-popper"
                                      direction="ltr"
                                      id="mui-2"
                                      onMouseLeave={[Function]}
                                      onMouseOver={[Function]}
                                      open={false}
                                      placement="top"
                                      popperOptions={
                                        Object {
                                          "modifiers": Array [
                                            Object {
                                              "enabled": false,
                                              "name": "arrow",
                                              "options": Object {
                                                "element": null,
                                                "padding": 4,
                                              },
                                            },
                                          ],
                                        }
                                      }
                                      popperRef={
                                        Object {
                                          "current": undefined,
                                        }
                                      }
                                      transition={true}
                                    />
                                  </MuiPopperRoot>
                                </ForwardRef(Popper)>
                              </MuiTooltipPopper>
                            </ForwardRef(Tooltip)>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </Component>
                    </li>
                  </ConditionalWrapper>
                </Focus>
              </WithStyles(Focus)>
            </HvListItem>
          </WithStyles(HvListItem)>
          <WithStyles(HvListItem)
            classes={
              Object {
                "gutters": "HvNavigationAnchors-listItemGutters",
                "selected": "HvNavigationAnchors-listItemSelected",
              }
            }
            key=".$Option3"
            onClick={[Function]}
            selected={false}
            tabIndex={-1}
          >
            <HvListItem
              classes={
                Object {
                  "condensed": "HvListItem-condensed",
                  "disabled": "HvListItem-disabled",
                  "endAdornment": "HvListItem-endAdornment",
                  "focus": "HvListItem-focus",
                  "gutters": "HvListItem-gutters HvNavigationAnchors-listItemGutters",
                  "interactive": "HvListItem-interactive",
                  "root": "HvListItem-root",
                  "selected": "HvListItem-selected HvNavigationAnchors-listItemSelected",
                  "startAdornment": "HvListItem-startAdornment",
                  "withEndAdornment": "HvListItem-withEndAdornment",
                  "withStartAdornment": "HvListItem-withStartAdornment",
                }
              }
              onClick={[Function]}
              selected={false}
              tabIndex={-1}
            >
              <WithStyles(Focus)
                classes={
                  Object {
                    "focus": "HvListItem-focus",
                  }
                }
                configuration={
                  Object {
                    "tabIndex": -1,
                  }
                }
                rootRef={
                  Object {
                    "current": <ul
                      class="HvNavigationAnchors-root HvListContainer-root"
                    >
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                        tabindex="0"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option1
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option2
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          data-mui-internal-clone-element="true"
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option3
                        </div>
                      </li>
                    </ul>,
                  }
                }
                selected={false}
                strategy="menu"
              >
                <Focus
                  classes={
                    Object {
                      "disabled": "HvFocus-disabled",
                      "externalReference": "HvFocus-externalReference",
                      "falseFocus": "HvFocus-falseFocus",
                      "focus": "HvFocus-focus HvListItem-focus",
                      "focusDisabled": "HvFocus-focusDisabled",
                      "focused": "HvFocus-focused",
                      "root": "HvFocus-root",
                      "selected": "HvFocus-selected",
                    }
                  }
                  configuration={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  rootRef={
                    Object {
                      "current": <ul
                        class="HvNavigationAnchors-root HvListContainer-root"
                      >
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                          tabindex="0"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option1
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option2
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            data-mui-internal-clone-element="true"
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option3
                          </div>
                        </li>
                      </ul>,
                    }
                  }
                  selected={false}
                  strategy="menu"
                >
                  <ConditionalWrapper
                    condition={false}
                    wrapper={[Function]}
                  >
                    <li
                      className="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      selected={false}
                    >
                      <Component>
                        <WithStyles(ForwardRef)
                          disableFocusListener={true}
                          disableHoverListener={false}
                          disableTouchListener={true}
                          open={false}
                          placement="top"
                          style={
                            Object {
                              "overflow": "hidden",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                            }
                          }
                          title={
                            <WithStyles(ForwardRef)>
                              Option3
                            </WithStyles(ForwardRef)>
                          }
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "color": "HvTooltip-color",
                                "popper": "HvTooltip-popper",
                                "root": "HvTooltip-root",
                                "separator": "HvTooltip-separator",
                                "separatorColor": "HvTooltip-separatorColor",
                                "title": "HvTooltip-title",
                                "tooltip": "HvTooltip-tooltip",
                                "tooltipMulti": "HvTooltip-tooltipMulti",
                                "valueWrapper": "HvTooltip-valueWrapper",
                                "values": "HvTooltip-values",
                                "valuesContainer": "HvTooltip-valuesContainer",
                              }
                            }
                            disableFocusListener={true}
                            disableHoverListener={false}
                            disableTouchListener={true}
                            open={false}
                            placement="top"
                            style={
                              Object {
                                "overflow": "hidden",
                                "textOverflow": "ellipsis",
                                "whiteSpace": "nowrap",
                              }
                            }
                            title={
                              <WithStyles(ForwardRef)>
                                Option3
                              </WithStyles(ForwardRef)>
                            }
                          >
                            <ForwardRef(Tooltip)
                              TransitionComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "addEndListener": [Function],
                                    "appear": [Function],
                                    "children": [Function],
                                    "easing": [Function],
                                    "in": [Function],
                                    "onEnter": [Function],
                                    "onEntered": [Function],
                                    "onEntering": [Function],
                                    "onExit": [Function],
                                    "onExited": [Function],
                                    "onExiting": [Function],
                                    "style": [Function],
                                    "timeout": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              TransitionProps={
                                Object {
                                  "timeout": 400,
                                }
                              }
                              classes={
                                Object {
                                  "popper": "HvTooltip-popper",
                                  "tooltip": "HvTooltip-tooltip",
                                }
                              }
                              disableFocusListener={true}
                              disableHoverListener={false}
                              disableTouchListener={true}
                              enterDelay={300}
                              open={false}
                              placement="top"
                              style={
                                Object {
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                }
                              }
                              title={
                                <WithStyles(ForwardRef)>
                                  Option3
                                </WithStyles(ForwardRef)>
                              }
                            >
                              <div
                                aria-label={null}
                                aria-labelledby={null}
                                className=""
                                data-mui-internal-clone-element={true}
                                onMouseEnter={[Function]}
                                onMouseLeave={[Function]}
                                onMouseOver={[Function]}
                                onTouchStart={[Function]}
                                style={
                                  Object {
                                    "overflow": "hidden",
                                    "textOverflow": "ellipsis",
                                    "whiteSpace": "nowrap",
                                  }
                                }
                              >
                                <ComponentFunction>
                                  Option3
                                </ComponentFunction>
                              </div>
                              <MuiTooltipPopper
                                anchorEl={
                                  <div
                                    class=""
                                    data-mui-internal-clone-element="true"
                                    style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                  >
                                    Option3
                                  </div>
                                }
                                as={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "anchorEl": [Function],
                                      "children": [Function],
                                      "component": [Function],
                                      "components": [Function],
                                      "componentsProps": [Function],
                                      "container": [Function],
                                      "disablePortal": [Function],
                                      "keepMounted": [Function],
                                      "modifiers": [Function],
                                      "open": [Function],
                                      "placement": [Function],
                                      "popperOptions": [Function],
                                      "popperRef": [Function],
                                      "sx": [Function],
                                      "transition": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive"
                                id="mui-3"
                                onMouseLeave={[Function]}
                                onMouseOver={[Function]}
                                open={false}
                                ownerState={
                                  Object {
                                    "PopperComponentProp": undefined,
                                    "TransitionComponent": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "propTypes": Object {
                                        "addEndListener": [Function],
                                        "appear": [Function],
                                        "children": [Function],
                                        "easing": [Function],
                                        "in": [Function],
                                        "onEnter": [Function],
                                        "onEntered": [Function],
                                        "onEntering": [Function],
                                        "onExit": [Function],
                                        "onExited": [Function],
                                        "onExiting": [Function],
                                        "style": [Function],
                                        "timeout": [Function],
                                      },
                                      "render": [Function],
                                    },
                                    "TransitionProps": Object {
                                      "timeout": 400,
                                    },
                                    "arrow": false,
                                    "children": <div
                                      onMouseEnter={[Function]}
                                      onMouseLeave={[Function]}
                                    >
                                      <ComponentFunction />
                                    </div>,
                                    "className": undefined,
                                    "classes": Object {
                                      "popper": "HvTooltip-popper",
                                      "tooltip": "HvTooltip-tooltip",
                                    },
                                    "disableFocusListener": true,
                                    "disableHoverListener": false,
                                    "disableInteractive": false,
                                    "disableTouchListener": true,
                                    "enterDelay": 300,
                                    "isRtl": false,
                                    "open": false,
                                    "placement": "top",
                                    "style": Object {
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    },
                                    "title": <WithStyles(ForwardRef)>
                                      Option3
                                    </WithStyles(ForwardRef)>,
                                    "touch": false,
                                  }
                                }
                                placement="top"
                                popperOptions={
                                  Object {
                                    "modifiers": Array [
                                      Object {
                                        "enabled": false,
                                        "name": "arrow",
                                        "options": Object {
                                          "element": null,
                                          "padding": 4,
                                        },
                                      },
                                    ],
                                  }
                                }
                                popperRef={
                                  Object {
                                    "current": undefined,
                                  }
                                }
                                transition={true}
                              >
                                <Insertion
                                  cache={
                                    Object {
                                      "insert": [Function],
                                      "inserted": Object {
                                        "1433tg5-MuiTooltip-popper": true,
                                        "179vq5o-MuiPopper-root-MuiTooltip-popper": true,
                                      },
                                      "key": "css",
                                      "nonce": undefined,
                                      "registered": Object {
                                        "css-1433tg5-MuiTooltip-popper": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                        "css-179vq5o-MuiPopper-root-MuiTooltip-popper": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                      },
                                      "sheet": StyleSheet {
                                        "_alreadyInsertedOrderInsensitiveRule": true,
                                        "_insertTag": [Function],
                                        "before": null,
                                        "container": <head>
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvFocus"
                                          >
                                            
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListContainer"
                                          >
                                            
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvListItem"
                                          >
                                            
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvTooltip"
                                          >
                                            
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                          </style>
                                          <style
                                            data-jss=""
                                            data-meta="HvNavigationAnchors"
                                          >
                                            
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                          </style>
                                        </head>,
                                        "ctr": 2,
                                        "insertionPoint": undefined,
                                        "isSpeedy": false,
                                        "key": "css",
                                        "nonce": undefined,
                                        "prepend": true,
                                        "tags": Array [
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>,
                                          <style
                                            data-emotion="css"
                                            data-s=""
                                          >
                                            
                                            .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                          </style>,
                                        ],
                                      },
                                    }
                                  }
                                  isStringTag={false}
                                  serialized={
                                    Object {
                                      "map": undefined,
                                      "name": "1433tg5-MuiTooltip-popper",
                                      "next": undefined,
                                      "styles": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                      "toString": [Function],
                                    }
                                  }
                                />
                                <ForwardRef(Popper)
                                  anchorEl={
                                    <div
                                      class=""
                                      data-mui-internal-clone-element="true"
                                      style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                    >
                                      Option3
                                    </div>
                                  }
                                  className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-1433tg5-MuiTooltip-popper"
                                  id="mui-3"
                                  onMouseLeave={[Function]}
                                  onMouseOver={[Function]}
                                  open={false}
                                  placement="top"
                                  popperOptions={
                                    Object {
                                      "modifiers": Array [
                                        Object {
                                          "enabled": false,
                                          "name": "arrow",
                                          "options": Object {
                                            "element": null,
                                            "padding": 4,
                                          },
                                        },
                                      ],
                                    }
                                  }
                                  popperRef={
                                    Object {
                                      "current": undefined,
                                    }
                                  }
                                  transition={true}
                                >
                                  <MuiPopperRoot
                                    anchorEl={
                                      <div
                                        class=""
                                        data-mui-internal-clone-element="true"
                                        style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                      >
                                        Option3
                                      </div>
                                    }
                                    className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-1433tg5-MuiTooltip-popper"
                                    direction="ltr"
                                    id="mui-3"
                                    onMouseLeave={[Function]}
                                    onMouseOver={[Function]}
                                    open={false}
                                    placement="top"
                                    popperOptions={
                                      Object {
                                        "modifiers": Array [
                                          Object {
                                            "enabled": false,
                                            "name": "arrow",
                                            "options": Object {
                                              "element": null,
                                              "padding": 4,
                                            },
                                          },
                                        ],
                                      }
                                    }
                                    popperRef={
                                      Object {
                                        "current": undefined,
                                      }
                                    }
                                    transition={true}
                                  >
                                    <Insertion
                                      cache={
                                        Object {
                                          "insert": [Function],
                                          "inserted": Object {
                                            "1433tg5-MuiTooltip-popper": true,
                                            "179vq5o-MuiPopper-root-MuiTooltip-popper": true,
                                          },
                                          "key": "css",
                                          "nonce": undefined,
                                          "registered": Object {
                                            "css-1433tg5-MuiTooltip-popper": "label:MuiTooltip-popper;z-index:1500;pointer-events:none;",
                                            "css-179vq5o-MuiPopper-root-MuiTooltip-popper": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                          },
                                          "sheet": StyleSheet {
                                            "_alreadyInsertedOrderInsensitiveRule": true,
                                            "_insertTag": [Function],
                                            "before": null,
                                            "container": <head>
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvFocus"
                                              >
                                                
.HvFocus-focusDisabled {
  outline: none;
}
.HvFocus-focusDisabled *:focus {
  outline: none;
}
.HvFocus-focusDisabled * {
  outline: none !important;
}
.HvFocus-focused {
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-focused {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}
.HvFocus-externalReference {
  position: relative;
}
.HvFocus-falseFocus {
  top: 0;
  left: 0.5%;
  width: 98%;
  height: 98%;
  z-index: 1;
  position: absolute;
  box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
  outline-color: #52A8EC;
  outline-style: solid;
  outline-width: 0px;
  outline-offset: -1px;
  pointer-events: none;
  background-color: transparent;
}
@media (-webkit-min-device-pixel-ratio:0) {
  .HvFocus-falseFocus {
    box-shadow: 0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3);
    outline-color: #52A8EC;
    outline-style: solid;
    outline-width: 0px;
    outline-offset: -1px;
  }
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListContainer"
                                              >
                                                
.HvListContainer-root {
  margin: 0;
  display: block;
  padding: 0;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvListItem"
                                              >
                                                
.HvListItem-root {
  color: #414141;
  height: 32px;
  display: block;
  padding: 0;
  overflow: hidden;
  position: relative;
  font-size: 12px;
  font-weight: 400;
  line-height: 32px;
  white-space: nowrap;
  text-overflow: ellipsis;
  letter-spacing: 0.02em;
  list-style-type: none;
}
.HvListItem-root:not(:last-child) {
  margin-bottom: 8px;
}
.HvListItem-root.HvListItem-condensed {
  margin-bottom: 0;
}
.HvListItem-gutters {
  padding: 0px 10px;
}
.HvListItem-gutters.HvListItem-withStartAdornment {
  padding-left: 0;
}
.HvListItem-gutters.HvListItem-withEndAdornment {
  padding-right: 0;
}
.HvListItem-interactive {
  cursor: pointer;
}
.HvListItem-interactive:not(.HvListItem-disabled):not(.HvListItem-selected):hover {
  background-color: #E8E8E8;
}
.HvListItem-interactive.HvListItem-disabled {
  cursor: not-allowed;
}
.HvListItem-selected {
  background-color: #E8E8E8;
}
.HvListItem-disabled {
  color: #999999;
}
.HvListItem-startAdornment {
  float: left;
}
.HvListItem-startAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-startAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-endAdornment {
  float: right;
}
.HvListItem-endAdornment svg {
  outline: none !important;
  box-shadow: none !important;
}
.HvListItem-disabled&gt;.HvListItem-endAdornment svg *.color0 {
  fill: #999999;
}
.HvListItem-focus {
  z-index: 2;
  background-color: #E8E8E8;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvTooltip"
                                              >
                                                
.HvTooltip-root {
  pointer-events: none;
}
.HvTooltip-tooltip {
  width: fit-content;
  display: flex;
  padding: 15px 20px;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltip p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  word-break: break-word;
  text-overflow: ellipsis;
}
.HvTooltip-tooltipMulti {
  width: fit-content;
  display: flex;
  padding: 0;
  max-width: 532px;
  box-shadow: 0 2px 12px rgba(65,65,65,0.12);
  background-color: #FBFCFC;
}
.HvTooltip-tooltipMulti p {
  color: #414141;
  width: fit-content;
  display: -webkit-box;
  overflow: hidden;
  box-orient: vertical;
  text-overflow: ellipsis;
}
.HvTooltip-popper {
  opacity: 1;
}
.HvTooltip-title {
  padding: 15px 20px;
  border-bottom: 3px solid #F0F0F0;
}
.HvTooltip-valuesContainer {
  padding: 20px;
}
.HvTooltip-values {
  display: flex;
  padding-bottom: 10px;
  justify-content: space-between;
}
.HvTooltip-values:last-child {
  padding-bottom: 0;
}
.HvTooltip-color {
  width: 10px;
  height: 15px;
}
.HvTooltip-separator {
  width: 10px;
}
.HvTooltip-separatorColor {
  width: 5px;
}
.HvTooltip-valueWrapper {
  padding: 20px;
}

                                              </style>
                                              <style
                                                data-jss=""
                                                data-meta="HvNavigationAnchors"
                                              >
                                                
.HvNavigationAnchors-root {
  width: 200px;
}
.HvNavigationAnchors-listItemGutters {
  padding: 0 20px;
}
.HvNavigationAnchors-listItemSelected {
  border-left: 2px solid #414141;
  font-weight: 600;
  padding-left: 18px;
}

                                              </style>
                                            </head>,
                                            "ctr": 2,
                                            "insertionPoint": undefined,
                                            "isSpeedy": false,
                                            "key": "css",
                                            "nonce": undefined,
                                            "prepend": true,
                                            "tags": Array [
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-1433tg5-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>,
                                              <style
                                                data-emotion="css"
                                                data-s=""
                                              >
                                                
                                                .css-179vq5o-MuiPopper-root-MuiTooltip-popper{z-index:1500;pointer-events:none;}
                                              </style>,
                                            ],
                                          },
                                        }
                                      }
                                      isStringTag={false}
                                      serialized={
                                        Object {
                                          "map": undefined,
                                          "name": "179vq5o-MuiPopper-root-MuiTooltip-popper",
                                          "next": undefined,
                                          "styles": "label:MuiPopper-root;label:MuiTooltip-popper;z-index:1500;pointer-events:none;;",
                                          "toString": [Function],
                                        }
                                      }
                                    />
                                    <ForwardRef(PopperUnstyled)
                                      anchorEl={
                                        <div
                                          class=""
                                          data-mui-internal-clone-element="true"
                                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                        >
                                          Option3
                                        </div>
                                      }
                                      className="MuiTooltip-popper HvTooltip-popper MuiTooltip-popperInteractive css-179vq5o-MuiPopper-root-MuiTooltip-popper"
                                      direction="ltr"
                                      id="mui-3"
                                      onMouseLeave={[Function]}
                                      onMouseOver={[Function]}
                                      open={false}
                                      placement="top"
                                      popperOptions={
                                        Object {
                                          "modifiers": Array [
                                            Object {
                                              "enabled": false,
                                              "name": "arrow",
                                              "options": Object {
                                                "element": null,
                                                "padding": 4,
                                              },
                                            },
                                          ],
                                        }
                                      }
                                      popperRef={
                                        Object {
                                          "current": undefined,
                                        }
                                      }
                                      transition={true}
                                    />
                                  </MuiPopperRoot>
                                </ForwardRef(Popper)>
                              </MuiTooltipPopper>
                            </ForwardRef(Tooltip)>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </Component>
                    </li>
                  </ConditionalWrapper>
                </Focus>
              </WithStyles(Focus)>
            </HvListItem>
          </WithStyles(HvListItem)>
        </ul>
      </ForwardRef>
    </WithStyles(ForwardRef)>
  </NavigationAnchors>
</WithStyles(NavigationAnchors)>
`;
