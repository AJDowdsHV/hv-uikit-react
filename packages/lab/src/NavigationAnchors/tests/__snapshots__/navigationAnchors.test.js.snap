// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`User withStyles should handle click action correctly 1`] = `
<WithStyles(NavigationAnchors)
  onClick={[Function]}
  options={
    Array [
      Object {
        "label": "Option1",
        "value": "Value1",
      },
      Object {
        "label": "Option2",
        "value": "Value2",
      },
      Object {
        "label": "Option3",
        "value": "Value3",
      },
    ]
  }
>
  <NavigationAnchors
    classes={
      Object {
        "listItemGutters": "HvNavigationAnchors-listItemGutters",
        "listItemSelected": "HvNavigationAnchors-listItemSelected",
        "root": "HvNavigationAnchors-root",
      }
    }
    onClick={[Function]}
    options={
      Array [
        Object {
          "label": "Option1",
          "value": "Value1",
        },
        Object {
          "label": "Option2",
          "value": "Value2",
        },
        Object {
          "label": "Option3",
          "value": "Value3",
        },
      ]
    }
  >
    <WithStyles(ForwardRef)
      className="HvNavigationAnchors-root"
      interactive={true}
    >
      <ForwardRef
        className="HvNavigationAnchors-root"
        classes={
          Object {
            "root": "HvListContainer-root",
          }
        }
        interactive={true}
      >
        <ul
          className="HvNavigationAnchors-root HvListContainer-root"
        >
          <WithStyles(HvListItem)
            classes={
              Object {
                "gutters": "HvNavigationAnchors-listItemGutters",
                "selected": "HvNavigationAnchors-listItemSelected",
              }
            }
            key=".$Option1"
            onClick={[Function]}
            selected={true}
            tabIndex={0}
          >
            <HvListItem
              classes={
                Object {
                  "condensed": "HvListItem-condensed",
                  "disabled": "HvListItem-disabled",
                  "endAdornment": "HvListItem-endAdornment",
                  "focus": "HvListItem-focus",
                  "gutters": "HvListItem-gutters HvNavigationAnchors-listItemGutters",
                  "interactive": "HvListItem-interactive",
                  "root": "HvListItem-root",
                  "selected": "HvListItem-selected HvNavigationAnchors-listItemSelected",
                  "startAdornment": "HvListItem-startAdornment",
                  "withEndAdornment": "HvListItem-withEndAdornment",
                  "withStartAdornment": "HvListItem-withStartAdornment",
                }
              }
              onClick={[Function]}
              selected={true}
              tabIndex={0}
            >
              <WithStyles(Focus)
                classes={
                  Object {
                    "focus": "HvListItem-focus",
                  }
                }
                configuration={
                  Object {
                    "tabIndex": 0,
                  }
                }
                rootRef={
                  Object {
                    "current": <ul
                      class="HvNavigationAnchors-root HvListContainer-root"
                    >
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                        tabindex="0"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option1
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option2
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option3
                        </div>
                      </li>
                    </ul>,
                  }
                }
                selected={true}
                strategy="menu"
              >
                <Focus
                  classes={
                    Object {
                      "disabled": "HvFocus-disabled",
                      "externalReference": "HvFocus-externalReference",
                      "falseFocus": "HvFocus-falseFocus",
                      "focus": "HvFocus-focus HvListItem-focus",
                      "focusDisabled": "HvFocus-focusDisabled",
                      "focused": "HvFocus-focused",
                      "root": "HvFocus-root",
                      "selected": "HvFocus-selected",
                    }
                  }
                  configuration={
                    Object {
                      "tabIndex": 0,
                    }
                  }
                  rootRef={
                    Object {
                      "current": <ul
                        class="HvNavigationAnchors-root HvListContainer-root"
                      >
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                          tabindex="0"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option1
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option2
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option3
                          </div>
                        </li>
                      </ul>,
                    }
                  }
                  selected={true}
                  strategy="menu"
                >
                  <ConditionalWrapper
                    condition={false}
                    wrapper={[Function]}
                  >
                    <li
                      className="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      selected={true}
                    >
                      <Component>
                        <WithStyles(ForwardRef)
                          disableFocusListener={true}
                          disableHoverListener={false}
                          disableTouchListener={true}
                          open={false}
                          placement="top"
                          style={
                            Object {
                              "overflow": "hidden",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                            }
                          }
                          title={
                            <WithStyles(ForwardRef)>
                              Option1
                            </WithStyles(ForwardRef)>
                          }
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "color": "HvTooltip-color",
                                "popper": "HvTooltip-popper",
                                "root": "HvTooltip-root",
                                "separator": "HvTooltip-separator",
                                "separatorColor": "HvTooltip-separatorColor",
                                "title": "HvTooltip-title",
                                "tooltip": "HvTooltip-tooltip",
                                "tooltipMulti": "HvTooltip-tooltipMulti",
                                "valueWrapper": "HvTooltip-valueWrapper",
                                "values": "HvTooltip-values",
                                "valuesContainer": "HvTooltip-valuesContainer",
                              }
                            }
                            disableFocusListener={true}
                            disableHoverListener={false}
                            disableTouchListener={true}
                            open={false}
                            placement="top"
                            style={
                              Object {
                                "overflow": "hidden",
                                "textOverflow": "ellipsis",
                                "whiteSpace": "nowrap",
                              }
                            }
                            title={
                              <WithStyles(ForwardRef)>
                                Option1
                              </WithStyles(ForwardRef)>
                            }
                          >
                            <WithStyles(ForwardRef(Tooltip))
                              TransitionComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "children": [Function],
                                    "disableStrictModeCompat": [Function],
                                    "in": [Function],
                                    "onEnter": [Function],
                                    "onEntered": [Function],
                                    "onEntering": [Function],
                                    "onExit": [Function],
                                    "onExited": [Function],
                                    "onExiting": [Function],
                                    "style": [Function],
                                    "timeout": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              TransitionProps={
                                Object {
                                  "timeout": 400,
                                }
                              }
                              classes={
                                Object {
                                  "popper": "HvTooltip-popper",
                                  "tooltip": "HvTooltip-tooltip",
                                }
                              }
                              disableFocusListener={true}
                              disableHoverListener={false}
                              disableTouchListener={true}
                              enterDelay={300}
                              open={false}
                              placement="top"
                              style={
                                Object {
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                }
                              }
                              title={
                                <WithStyles(ForwardRef)>
                                  Option1
                                </WithStyles(ForwardRef)>
                              }
                            >
                              <ForwardRef(Tooltip)
                                TransitionComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "children": [Function],
                                      "disableStrictModeCompat": [Function],
                                      "in": [Function],
                                      "onEnter": [Function],
                                      "onEntered": [Function],
                                      "onEntering": [Function],
                                      "onExit": [Function],
                                      "onExited": [Function],
                                      "onExiting": [Function],
                                      "style": [Function],
                                      "timeout": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                TransitionProps={
                                  Object {
                                    "timeout": 400,
                                  }
                                }
                                classes={
                                  Object {
                                    "arrow": "MuiTooltip-arrow",
                                    "popper": "MuiTooltip-popper HvTooltip-popper",
                                    "popperArrow": "MuiTooltip-popperArrow",
                                    "popperInteractive": "MuiTooltip-popperInteractive",
                                    "tooltip": "MuiTooltip-tooltip HvTooltip-tooltip",
                                    "tooltipArrow": "MuiTooltip-tooltipArrow",
                                    "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
                                    "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
                                    "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
                                    "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
                                    "touch": "MuiTooltip-touch",
                                  }
                                }
                                disableFocusListener={true}
                                disableHoverListener={false}
                                disableTouchListener={true}
                                enterDelay={300}
                                open={false}
                                placement="top"
                                style={
                                  Object {
                                    "overflow": "hidden",
                                    "textOverflow": "ellipsis",
                                    "whiteSpace": "nowrap",
                                  }
                                }
                                title={
                                  <WithStyles(ForwardRef)>
                                    Option1
                                  </WithStyles(ForwardRef)>
                                }
                              >
                                <div
                                  aria-describedby={null}
                                  className=""
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseOver={[Function]}
                                  onTouchStart={[Function]}
                                  style={
                                    Object {
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    }
                                  }
                                  title={null}
                                >
                                  <ComponentFunction>
                                    Option1
                                  </ComponentFunction>
                                </div>
                                <ForwardRef(Popper)
                                  anchorEl={
                                    <div
                                      class=""
                                      style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                    >
                                      Option1
                                    </div>
                                  }
                                  className="MuiTooltip-popper HvTooltip-popper"
                                  id={null}
                                  open={false}
                                  placement="top"
                                  popperOptions={
                                    Object {
                                      "modifiers": Object {
                                        "arrow": Object {
                                          "element": null,
                                          "enabled": false,
                                        },
                                      },
                                    }
                                  }
                                  transition={true}
                                />
                              </ForwardRef(Tooltip)>
                            </WithStyles(ForwardRef(Tooltip))>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </Component>
                    </li>
                  </ConditionalWrapper>
                </Focus>
              </WithStyles(Focus)>
            </HvListItem>
          </WithStyles(HvListItem)>
          <WithStyles(HvListItem)
            classes={
              Object {
                "gutters": "HvNavigationAnchors-listItemGutters",
                "selected": "HvNavigationAnchors-listItemSelected",
              }
            }
            key=".$Option2"
            onClick={[Function]}
            selected={false}
            tabIndex={-1}
          >
            <HvListItem
              classes={
                Object {
                  "condensed": "HvListItem-condensed",
                  "disabled": "HvListItem-disabled",
                  "endAdornment": "HvListItem-endAdornment",
                  "focus": "HvListItem-focus",
                  "gutters": "HvListItem-gutters HvNavigationAnchors-listItemGutters",
                  "interactive": "HvListItem-interactive",
                  "root": "HvListItem-root",
                  "selected": "HvListItem-selected HvNavigationAnchors-listItemSelected",
                  "startAdornment": "HvListItem-startAdornment",
                  "withEndAdornment": "HvListItem-withEndAdornment",
                  "withStartAdornment": "HvListItem-withStartAdornment",
                }
              }
              onClick={[Function]}
              selected={false}
              tabIndex={-1}
            >
              <WithStyles(Focus)
                classes={
                  Object {
                    "focus": "HvListItem-focus",
                  }
                }
                configuration={
                  Object {
                    "tabIndex": -1,
                  }
                }
                rootRef={
                  Object {
                    "current": <ul
                      class="HvNavigationAnchors-root HvListContainer-root"
                    >
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                        tabindex="0"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option1
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option2
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option3
                        </div>
                      </li>
                    </ul>,
                  }
                }
                selected={false}
                strategy="menu"
              >
                <Focus
                  classes={
                    Object {
                      "disabled": "HvFocus-disabled",
                      "externalReference": "HvFocus-externalReference",
                      "falseFocus": "HvFocus-falseFocus",
                      "focus": "HvFocus-focus HvListItem-focus",
                      "focusDisabled": "HvFocus-focusDisabled",
                      "focused": "HvFocus-focused",
                      "root": "HvFocus-root",
                      "selected": "HvFocus-selected",
                    }
                  }
                  configuration={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  rootRef={
                    Object {
                      "current": <ul
                        class="HvNavigationAnchors-root HvListContainer-root"
                      >
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                          tabindex="0"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option1
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option2
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option3
                          </div>
                        </li>
                      </ul>,
                    }
                  }
                  selected={false}
                  strategy="menu"
                >
                  <ConditionalWrapper
                    condition={false}
                    wrapper={[Function]}
                  >
                    <li
                      className="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      selected={false}
                    >
                      <Component>
                        <WithStyles(ForwardRef)
                          disableFocusListener={true}
                          disableHoverListener={false}
                          disableTouchListener={true}
                          open={false}
                          placement="top"
                          style={
                            Object {
                              "overflow": "hidden",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                            }
                          }
                          title={
                            <WithStyles(ForwardRef)>
                              Option2
                            </WithStyles(ForwardRef)>
                          }
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "color": "HvTooltip-color",
                                "popper": "HvTooltip-popper",
                                "root": "HvTooltip-root",
                                "separator": "HvTooltip-separator",
                                "separatorColor": "HvTooltip-separatorColor",
                                "title": "HvTooltip-title",
                                "tooltip": "HvTooltip-tooltip",
                                "tooltipMulti": "HvTooltip-tooltipMulti",
                                "valueWrapper": "HvTooltip-valueWrapper",
                                "values": "HvTooltip-values",
                                "valuesContainer": "HvTooltip-valuesContainer",
                              }
                            }
                            disableFocusListener={true}
                            disableHoverListener={false}
                            disableTouchListener={true}
                            open={false}
                            placement="top"
                            style={
                              Object {
                                "overflow": "hidden",
                                "textOverflow": "ellipsis",
                                "whiteSpace": "nowrap",
                              }
                            }
                            title={
                              <WithStyles(ForwardRef)>
                                Option2
                              </WithStyles(ForwardRef)>
                            }
                          >
                            <WithStyles(ForwardRef(Tooltip))
                              TransitionComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "children": [Function],
                                    "disableStrictModeCompat": [Function],
                                    "in": [Function],
                                    "onEnter": [Function],
                                    "onEntered": [Function],
                                    "onEntering": [Function],
                                    "onExit": [Function],
                                    "onExited": [Function],
                                    "onExiting": [Function],
                                    "style": [Function],
                                    "timeout": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              TransitionProps={
                                Object {
                                  "timeout": 400,
                                }
                              }
                              classes={
                                Object {
                                  "popper": "HvTooltip-popper",
                                  "tooltip": "HvTooltip-tooltip",
                                }
                              }
                              disableFocusListener={true}
                              disableHoverListener={false}
                              disableTouchListener={true}
                              enterDelay={300}
                              open={false}
                              placement="top"
                              style={
                                Object {
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                }
                              }
                              title={
                                <WithStyles(ForwardRef)>
                                  Option2
                                </WithStyles(ForwardRef)>
                              }
                            >
                              <ForwardRef(Tooltip)
                                TransitionComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "children": [Function],
                                      "disableStrictModeCompat": [Function],
                                      "in": [Function],
                                      "onEnter": [Function],
                                      "onEntered": [Function],
                                      "onEntering": [Function],
                                      "onExit": [Function],
                                      "onExited": [Function],
                                      "onExiting": [Function],
                                      "style": [Function],
                                      "timeout": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                TransitionProps={
                                  Object {
                                    "timeout": 400,
                                  }
                                }
                                classes={
                                  Object {
                                    "arrow": "MuiTooltip-arrow",
                                    "popper": "MuiTooltip-popper HvTooltip-popper",
                                    "popperArrow": "MuiTooltip-popperArrow",
                                    "popperInteractive": "MuiTooltip-popperInteractive",
                                    "tooltip": "MuiTooltip-tooltip HvTooltip-tooltip",
                                    "tooltipArrow": "MuiTooltip-tooltipArrow",
                                    "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
                                    "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
                                    "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
                                    "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
                                    "touch": "MuiTooltip-touch",
                                  }
                                }
                                disableFocusListener={true}
                                disableHoverListener={false}
                                disableTouchListener={true}
                                enterDelay={300}
                                open={false}
                                placement="top"
                                style={
                                  Object {
                                    "overflow": "hidden",
                                    "textOverflow": "ellipsis",
                                    "whiteSpace": "nowrap",
                                  }
                                }
                                title={
                                  <WithStyles(ForwardRef)>
                                    Option2
                                  </WithStyles(ForwardRef)>
                                }
                              >
                                <div
                                  aria-describedby={null}
                                  className=""
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseOver={[Function]}
                                  onTouchStart={[Function]}
                                  style={
                                    Object {
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    }
                                  }
                                  title={null}
                                >
                                  <ComponentFunction>
                                    Option2
                                  </ComponentFunction>
                                </div>
                                <ForwardRef(Popper)
                                  anchorEl={
                                    <div
                                      class=""
                                      style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                    >
                                      Option2
                                    </div>
                                  }
                                  className="MuiTooltip-popper HvTooltip-popper"
                                  id={null}
                                  open={false}
                                  placement="top"
                                  popperOptions={
                                    Object {
                                      "modifiers": Object {
                                        "arrow": Object {
                                          "element": null,
                                          "enabled": false,
                                        },
                                      },
                                    }
                                  }
                                  transition={true}
                                />
                              </ForwardRef(Tooltip)>
                            </WithStyles(ForwardRef(Tooltip))>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </Component>
                    </li>
                  </ConditionalWrapper>
                </Focus>
              </WithStyles(Focus)>
            </HvListItem>
          </WithStyles(HvListItem)>
          <WithStyles(HvListItem)
            classes={
              Object {
                "gutters": "HvNavigationAnchors-listItemGutters",
                "selected": "HvNavigationAnchors-listItemSelected",
              }
            }
            key=".$Option3"
            onClick={[Function]}
            selected={false}
            tabIndex={-1}
          >
            <HvListItem
              classes={
                Object {
                  "condensed": "HvListItem-condensed",
                  "disabled": "HvListItem-disabled",
                  "endAdornment": "HvListItem-endAdornment",
                  "focus": "HvListItem-focus",
                  "gutters": "HvListItem-gutters HvNavigationAnchors-listItemGutters",
                  "interactive": "HvListItem-interactive",
                  "root": "HvListItem-root",
                  "selected": "HvListItem-selected HvNavigationAnchors-listItemSelected",
                  "startAdornment": "HvListItem-startAdornment",
                  "withEndAdornment": "HvListItem-withEndAdornment",
                  "withStartAdornment": "HvListItem-withStartAdornment",
                }
              }
              onClick={[Function]}
              selected={false}
              tabIndex={-1}
            >
              <WithStyles(Focus)
                classes={
                  Object {
                    "focus": "HvListItem-focus",
                  }
                }
                configuration={
                  Object {
                    "tabIndex": -1,
                  }
                }
                rootRef={
                  Object {
                    "current": <ul
                      class="HvNavigationAnchors-root HvListContainer-root"
                    >
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                        tabindex="0"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option1
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option2
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option3
                        </div>
                      </li>
                    </ul>,
                  }
                }
                selected={false}
                strategy="menu"
              >
                <Focus
                  classes={
                    Object {
                      "disabled": "HvFocus-disabled",
                      "externalReference": "HvFocus-externalReference",
                      "falseFocus": "HvFocus-falseFocus",
                      "focus": "HvFocus-focus HvListItem-focus",
                      "focusDisabled": "HvFocus-focusDisabled",
                      "focused": "HvFocus-focused",
                      "root": "HvFocus-root",
                      "selected": "HvFocus-selected",
                    }
                  }
                  configuration={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  rootRef={
                    Object {
                      "current": <ul
                        class="HvNavigationAnchors-root HvListContainer-root"
                      >
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                          tabindex="0"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option1
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option2
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option3
                          </div>
                        </li>
                      </ul>,
                    }
                  }
                  selected={false}
                  strategy="menu"
                >
                  <ConditionalWrapper
                    condition={false}
                    wrapper={[Function]}
                  >
                    <li
                      className="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      selected={false}
                    >
                      <Component>
                        <WithStyles(ForwardRef)
                          disableFocusListener={true}
                          disableHoverListener={false}
                          disableTouchListener={true}
                          open={false}
                          placement="top"
                          style={
                            Object {
                              "overflow": "hidden",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                            }
                          }
                          title={
                            <WithStyles(ForwardRef)>
                              Option3
                            </WithStyles(ForwardRef)>
                          }
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "color": "HvTooltip-color",
                                "popper": "HvTooltip-popper",
                                "root": "HvTooltip-root",
                                "separator": "HvTooltip-separator",
                                "separatorColor": "HvTooltip-separatorColor",
                                "title": "HvTooltip-title",
                                "tooltip": "HvTooltip-tooltip",
                                "tooltipMulti": "HvTooltip-tooltipMulti",
                                "valueWrapper": "HvTooltip-valueWrapper",
                                "values": "HvTooltip-values",
                                "valuesContainer": "HvTooltip-valuesContainer",
                              }
                            }
                            disableFocusListener={true}
                            disableHoverListener={false}
                            disableTouchListener={true}
                            open={false}
                            placement="top"
                            style={
                              Object {
                                "overflow": "hidden",
                                "textOverflow": "ellipsis",
                                "whiteSpace": "nowrap",
                              }
                            }
                            title={
                              <WithStyles(ForwardRef)>
                                Option3
                              </WithStyles(ForwardRef)>
                            }
                          >
                            <WithStyles(ForwardRef(Tooltip))
                              TransitionComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "children": [Function],
                                    "disableStrictModeCompat": [Function],
                                    "in": [Function],
                                    "onEnter": [Function],
                                    "onEntered": [Function],
                                    "onEntering": [Function],
                                    "onExit": [Function],
                                    "onExited": [Function],
                                    "onExiting": [Function],
                                    "style": [Function],
                                    "timeout": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              TransitionProps={
                                Object {
                                  "timeout": 400,
                                }
                              }
                              classes={
                                Object {
                                  "popper": "HvTooltip-popper",
                                  "tooltip": "HvTooltip-tooltip",
                                }
                              }
                              disableFocusListener={true}
                              disableHoverListener={false}
                              disableTouchListener={true}
                              enterDelay={300}
                              open={false}
                              placement="top"
                              style={
                                Object {
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                }
                              }
                              title={
                                <WithStyles(ForwardRef)>
                                  Option3
                                </WithStyles(ForwardRef)>
                              }
                            >
                              <ForwardRef(Tooltip)
                                TransitionComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "children": [Function],
                                      "disableStrictModeCompat": [Function],
                                      "in": [Function],
                                      "onEnter": [Function],
                                      "onEntered": [Function],
                                      "onEntering": [Function],
                                      "onExit": [Function],
                                      "onExited": [Function],
                                      "onExiting": [Function],
                                      "style": [Function],
                                      "timeout": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                TransitionProps={
                                  Object {
                                    "timeout": 400,
                                  }
                                }
                                classes={
                                  Object {
                                    "arrow": "MuiTooltip-arrow",
                                    "popper": "MuiTooltip-popper HvTooltip-popper",
                                    "popperArrow": "MuiTooltip-popperArrow",
                                    "popperInteractive": "MuiTooltip-popperInteractive",
                                    "tooltip": "MuiTooltip-tooltip HvTooltip-tooltip",
                                    "tooltipArrow": "MuiTooltip-tooltipArrow",
                                    "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
                                    "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
                                    "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
                                    "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
                                    "touch": "MuiTooltip-touch",
                                  }
                                }
                                disableFocusListener={true}
                                disableHoverListener={false}
                                disableTouchListener={true}
                                enterDelay={300}
                                open={false}
                                placement="top"
                                style={
                                  Object {
                                    "overflow": "hidden",
                                    "textOverflow": "ellipsis",
                                    "whiteSpace": "nowrap",
                                  }
                                }
                                title={
                                  <WithStyles(ForwardRef)>
                                    Option3
                                  </WithStyles(ForwardRef)>
                                }
                              >
                                <div
                                  aria-describedby={null}
                                  className=""
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseOver={[Function]}
                                  onTouchStart={[Function]}
                                  style={
                                    Object {
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    }
                                  }
                                  title={null}
                                >
                                  <ComponentFunction>
                                    Option3
                                  </ComponentFunction>
                                </div>
                                <ForwardRef(Popper)
                                  anchorEl={
                                    <div
                                      class=""
                                      style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                    >
                                      Option3
                                    </div>
                                  }
                                  className="MuiTooltip-popper HvTooltip-popper"
                                  id={null}
                                  open={false}
                                  placement="top"
                                  popperOptions={
                                    Object {
                                      "modifiers": Object {
                                        "arrow": Object {
                                          "element": null,
                                          "enabled": false,
                                        },
                                      },
                                    }
                                  }
                                  transition={true}
                                />
                              </ForwardRef(Tooltip)>
                            </WithStyles(ForwardRef(Tooltip))>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </Component>
                    </li>
                  </ConditionalWrapper>
                </Focus>
              </WithStyles(Focus)>
            </HvListItem>
          </WithStyles(HvListItem)>
        </ul>
      </ForwardRef>
    </WithStyles(ForwardRef)>
  </NavigationAnchors>
</WithStyles(NavigationAnchors)>
`;

exports[`User withStyles should render correctly 1`] = `
<WithStyles(NavigationAnchors)
  options={
    Array [
      Object {
        "label": "Option1",
        "value": "Value1",
      },
      Object {
        "label": "Option2",
        "value": "Value2",
      },
      Object {
        "label": "Option3",
        "value": "Value3",
      },
    ]
  }
/>
`;

exports[`User withStyles should render correctly with props 1`] = `
<WithStyles(NavigationAnchors)
  options={
    Array [
      Object {
        "label": "Option1",
        "value": "Value1",
      },
      Object {
        "label": "Option2",
        "value": "Value2",
      },
      Object {
        "label": "Option3",
        "value": "Value3",
      },
    ]
  }
>
  <NavigationAnchors
    classes={
      Object {
        "listItemGutters": "HvNavigationAnchors-listItemGutters",
        "listItemSelected": "HvNavigationAnchors-listItemSelected",
        "root": "HvNavigationAnchors-root",
      }
    }
    options={
      Array [
        Object {
          "label": "Option1",
          "value": "Value1",
        },
        Object {
          "label": "Option2",
          "value": "Value2",
        },
        Object {
          "label": "Option3",
          "value": "Value3",
        },
      ]
    }
  >
    <WithStyles(ForwardRef)
      className="HvNavigationAnchors-root"
      interactive={true}
    >
      <ForwardRef
        className="HvNavigationAnchors-root"
        classes={
          Object {
            "root": "HvListContainer-root",
          }
        }
        interactive={true}
      >
        <ul
          className="HvNavigationAnchors-root HvListContainer-root"
        >
          <WithStyles(HvListItem)
            classes={
              Object {
                "gutters": "HvNavigationAnchors-listItemGutters",
                "selected": "HvNavigationAnchors-listItemSelected",
              }
            }
            key=".$Option1"
            onClick={[Function]}
            selected={true}
            tabIndex={0}
          >
            <HvListItem
              classes={
                Object {
                  "condensed": "HvListItem-condensed",
                  "disabled": "HvListItem-disabled",
                  "endAdornment": "HvListItem-endAdornment",
                  "focus": "HvListItem-focus",
                  "gutters": "HvListItem-gutters HvNavigationAnchors-listItemGutters",
                  "interactive": "HvListItem-interactive",
                  "root": "HvListItem-root",
                  "selected": "HvListItem-selected HvNavigationAnchors-listItemSelected",
                  "startAdornment": "HvListItem-startAdornment",
                  "withEndAdornment": "HvListItem-withEndAdornment",
                  "withStartAdornment": "HvListItem-withStartAdornment",
                }
              }
              onClick={[Function]}
              selected={true}
              tabIndex={0}
            >
              <WithStyles(Focus)
                classes={
                  Object {
                    "focus": "HvListItem-focus",
                  }
                }
                configuration={
                  Object {
                    "tabIndex": 0,
                  }
                }
                rootRef={
                  Object {
                    "current": <ul
                      class="HvNavigationAnchors-root HvListContainer-root"
                    >
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                        tabindex="0"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option1
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option2
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option3
                        </div>
                      </li>
                    </ul>,
                  }
                }
                selected={true}
                strategy="menu"
              >
                <Focus
                  classes={
                    Object {
                      "disabled": "HvFocus-disabled",
                      "externalReference": "HvFocus-externalReference",
                      "falseFocus": "HvFocus-falseFocus",
                      "focus": "HvFocus-focus HvListItem-focus",
                      "focusDisabled": "HvFocus-focusDisabled",
                      "focused": "HvFocus-focused",
                      "root": "HvFocus-root",
                      "selected": "HvFocus-selected",
                    }
                  }
                  configuration={
                    Object {
                      "tabIndex": 0,
                    }
                  }
                  rootRef={
                    Object {
                      "current": <ul
                        class="HvNavigationAnchors-root HvListContainer-root"
                      >
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                          tabindex="0"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option1
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option2
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option3
                          </div>
                        </li>
                      </ul>,
                    }
                  }
                  selected={true}
                  strategy="menu"
                >
                  <ConditionalWrapper
                    condition={false}
                    wrapper={[Function]}
                  >
                    <li
                      className="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      selected={true}
                    >
                      <Component>
                        <WithStyles(ForwardRef)
                          disableFocusListener={true}
                          disableHoverListener={false}
                          disableTouchListener={true}
                          open={false}
                          placement="top"
                          style={
                            Object {
                              "overflow": "hidden",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                            }
                          }
                          title={
                            <WithStyles(ForwardRef)>
                              Option1
                            </WithStyles(ForwardRef)>
                          }
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "color": "HvTooltip-color",
                                "popper": "HvTooltip-popper",
                                "root": "HvTooltip-root",
                                "separator": "HvTooltip-separator",
                                "separatorColor": "HvTooltip-separatorColor",
                                "title": "HvTooltip-title",
                                "tooltip": "HvTooltip-tooltip",
                                "tooltipMulti": "HvTooltip-tooltipMulti",
                                "valueWrapper": "HvTooltip-valueWrapper",
                                "values": "HvTooltip-values",
                                "valuesContainer": "HvTooltip-valuesContainer",
                              }
                            }
                            disableFocusListener={true}
                            disableHoverListener={false}
                            disableTouchListener={true}
                            open={false}
                            placement="top"
                            style={
                              Object {
                                "overflow": "hidden",
                                "textOverflow": "ellipsis",
                                "whiteSpace": "nowrap",
                              }
                            }
                            title={
                              <WithStyles(ForwardRef)>
                                Option1
                              </WithStyles(ForwardRef)>
                            }
                          >
                            <WithStyles(ForwardRef(Tooltip))
                              TransitionComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "children": [Function],
                                    "disableStrictModeCompat": [Function],
                                    "in": [Function],
                                    "onEnter": [Function],
                                    "onEntered": [Function],
                                    "onEntering": [Function],
                                    "onExit": [Function],
                                    "onExited": [Function],
                                    "onExiting": [Function],
                                    "style": [Function],
                                    "timeout": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              TransitionProps={
                                Object {
                                  "timeout": 400,
                                }
                              }
                              classes={
                                Object {
                                  "popper": "HvTooltip-popper",
                                  "tooltip": "HvTooltip-tooltip",
                                }
                              }
                              disableFocusListener={true}
                              disableHoverListener={false}
                              disableTouchListener={true}
                              enterDelay={300}
                              open={false}
                              placement="top"
                              style={
                                Object {
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                }
                              }
                              title={
                                <WithStyles(ForwardRef)>
                                  Option1
                                </WithStyles(ForwardRef)>
                              }
                            >
                              <ForwardRef(Tooltip)
                                TransitionComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "children": [Function],
                                      "disableStrictModeCompat": [Function],
                                      "in": [Function],
                                      "onEnter": [Function],
                                      "onEntered": [Function],
                                      "onEntering": [Function],
                                      "onExit": [Function],
                                      "onExited": [Function],
                                      "onExiting": [Function],
                                      "style": [Function],
                                      "timeout": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                TransitionProps={
                                  Object {
                                    "timeout": 400,
                                  }
                                }
                                classes={
                                  Object {
                                    "arrow": "MuiTooltip-arrow",
                                    "popper": "MuiTooltip-popper HvTooltip-popper",
                                    "popperArrow": "MuiTooltip-popperArrow",
                                    "popperInteractive": "MuiTooltip-popperInteractive",
                                    "tooltip": "MuiTooltip-tooltip HvTooltip-tooltip",
                                    "tooltipArrow": "MuiTooltip-tooltipArrow",
                                    "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
                                    "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
                                    "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
                                    "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
                                    "touch": "MuiTooltip-touch",
                                  }
                                }
                                disableFocusListener={true}
                                disableHoverListener={false}
                                disableTouchListener={true}
                                enterDelay={300}
                                open={false}
                                placement="top"
                                style={
                                  Object {
                                    "overflow": "hidden",
                                    "textOverflow": "ellipsis",
                                    "whiteSpace": "nowrap",
                                  }
                                }
                                title={
                                  <WithStyles(ForwardRef)>
                                    Option1
                                  </WithStyles(ForwardRef)>
                                }
                              >
                                <div
                                  aria-describedby={null}
                                  className=""
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseOver={[Function]}
                                  onTouchStart={[Function]}
                                  style={
                                    Object {
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    }
                                  }
                                  title={null}
                                >
                                  <ComponentFunction>
                                    Option1
                                  </ComponentFunction>
                                </div>
                                <ForwardRef(Popper)
                                  anchorEl={
                                    <div
                                      class=""
                                      style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                    >
                                      Option1
                                    </div>
                                  }
                                  className="MuiTooltip-popper HvTooltip-popper"
                                  id={null}
                                  open={false}
                                  placement="top"
                                  popperOptions={
                                    Object {
                                      "modifiers": Object {
                                        "arrow": Object {
                                          "element": null,
                                          "enabled": false,
                                        },
                                      },
                                    }
                                  }
                                  transition={true}
                                />
                              </ForwardRef(Tooltip)>
                            </WithStyles(ForwardRef(Tooltip))>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </Component>
                    </li>
                  </ConditionalWrapper>
                </Focus>
              </WithStyles(Focus)>
            </HvListItem>
          </WithStyles(HvListItem)>
          <WithStyles(HvListItem)
            classes={
              Object {
                "gutters": "HvNavigationAnchors-listItemGutters",
                "selected": "HvNavigationAnchors-listItemSelected",
              }
            }
            key=".$Option2"
            onClick={[Function]}
            selected={false}
            tabIndex={-1}
          >
            <HvListItem
              classes={
                Object {
                  "condensed": "HvListItem-condensed",
                  "disabled": "HvListItem-disabled",
                  "endAdornment": "HvListItem-endAdornment",
                  "focus": "HvListItem-focus",
                  "gutters": "HvListItem-gutters HvNavigationAnchors-listItemGutters",
                  "interactive": "HvListItem-interactive",
                  "root": "HvListItem-root",
                  "selected": "HvListItem-selected HvNavigationAnchors-listItemSelected",
                  "startAdornment": "HvListItem-startAdornment",
                  "withEndAdornment": "HvListItem-withEndAdornment",
                  "withStartAdornment": "HvListItem-withStartAdornment",
                }
              }
              onClick={[Function]}
              selected={false}
              tabIndex={-1}
            >
              <WithStyles(Focus)
                classes={
                  Object {
                    "focus": "HvListItem-focus",
                  }
                }
                configuration={
                  Object {
                    "tabIndex": -1,
                  }
                }
                rootRef={
                  Object {
                    "current": <ul
                      class="HvNavigationAnchors-root HvListContainer-root"
                    >
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                        tabindex="0"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option1
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option2
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option3
                        </div>
                      </li>
                    </ul>,
                  }
                }
                selected={false}
                strategy="menu"
              >
                <Focus
                  classes={
                    Object {
                      "disabled": "HvFocus-disabled",
                      "externalReference": "HvFocus-externalReference",
                      "falseFocus": "HvFocus-falseFocus",
                      "focus": "HvFocus-focus HvListItem-focus",
                      "focusDisabled": "HvFocus-focusDisabled",
                      "focused": "HvFocus-focused",
                      "root": "HvFocus-root",
                      "selected": "HvFocus-selected",
                    }
                  }
                  configuration={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  rootRef={
                    Object {
                      "current": <ul
                        class="HvNavigationAnchors-root HvListContainer-root"
                      >
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                          tabindex="0"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option1
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option2
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option3
                          </div>
                        </li>
                      </ul>,
                    }
                  }
                  selected={false}
                  strategy="menu"
                >
                  <ConditionalWrapper
                    condition={false}
                    wrapper={[Function]}
                  >
                    <li
                      className="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      selected={false}
                    >
                      <Component>
                        <WithStyles(ForwardRef)
                          disableFocusListener={true}
                          disableHoverListener={false}
                          disableTouchListener={true}
                          open={false}
                          placement="top"
                          style={
                            Object {
                              "overflow": "hidden",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                            }
                          }
                          title={
                            <WithStyles(ForwardRef)>
                              Option2
                            </WithStyles(ForwardRef)>
                          }
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "color": "HvTooltip-color",
                                "popper": "HvTooltip-popper",
                                "root": "HvTooltip-root",
                                "separator": "HvTooltip-separator",
                                "separatorColor": "HvTooltip-separatorColor",
                                "title": "HvTooltip-title",
                                "tooltip": "HvTooltip-tooltip",
                                "tooltipMulti": "HvTooltip-tooltipMulti",
                                "valueWrapper": "HvTooltip-valueWrapper",
                                "values": "HvTooltip-values",
                                "valuesContainer": "HvTooltip-valuesContainer",
                              }
                            }
                            disableFocusListener={true}
                            disableHoverListener={false}
                            disableTouchListener={true}
                            open={false}
                            placement="top"
                            style={
                              Object {
                                "overflow": "hidden",
                                "textOverflow": "ellipsis",
                                "whiteSpace": "nowrap",
                              }
                            }
                            title={
                              <WithStyles(ForwardRef)>
                                Option2
                              </WithStyles(ForwardRef)>
                            }
                          >
                            <WithStyles(ForwardRef(Tooltip))
                              TransitionComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "children": [Function],
                                    "disableStrictModeCompat": [Function],
                                    "in": [Function],
                                    "onEnter": [Function],
                                    "onEntered": [Function],
                                    "onEntering": [Function],
                                    "onExit": [Function],
                                    "onExited": [Function],
                                    "onExiting": [Function],
                                    "style": [Function],
                                    "timeout": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              TransitionProps={
                                Object {
                                  "timeout": 400,
                                }
                              }
                              classes={
                                Object {
                                  "popper": "HvTooltip-popper",
                                  "tooltip": "HvTooltip-tooltip",
                                }
                              }
                              disableFocusListener={true}
                              disableHoverListener={false}
                              disableTouchListener={true}
                              enterDelay={300}
                              open={false}
                              placement="top"
                              style={
                                Object {
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                }
                              }
                              title={
                                <WithStyles(ForwardRef)>
                                  Option2
                                </WithStyles(ForwardRef)>
                              }
                            >
                              <ForwardRef(Tooltip)
                                TransitionComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "children": [Function],
                                      "disableStrictModeCompat": [Function],
                                      "in": [Function],
                                      "onEnter": [Function],
                                      "onEntered": [Function],
                                      "onEntering": [Function],
                                      "onExit": [Function],
                                      "onExited": [Function],
                                      "onExiting": [Function],
                                      "style": [Function],
                                      "timeout": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                TransitionProps={
                                  Object {
                                    "timeout": 400,
                                  }
                                }
                                classes={
                                  Object {
                                    "arrow": "MuiTooltip-arrow",
                                    "popper": "MuiTooltip-popper HvTooltip-popper",
                                    "popperArrow": "MuiTooltip-popperArrow",
                                    "popperInteractive": "MuiTooltip-popperInteractive",
                                    "tooltip": "MuiTooltip-tooltip HvTooltip-tooltip",
                                    "tooltipArrow": "MuiTooltip-tooltipArrow",
                                    "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
                                    "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
                                    "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
                                    "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
                                    "touch": "MuiTooltip-touch",
                                  }
                                }
                                disableFocusListener={true}
                                disableHoverListener={false}
                                disableTouchListener={true}
                                enterDelay={300}
                                open={false}
                                placement="top"
                                style={
                                  Object {
                                    "overflow": "hidden",
                                    "textOverflow": "ellipsis",
                                    "whiteSpace": "nowrap",
                                  }
                                }
                                title={
                                  <WithStyles(ForwardRef)>
                                    Option2
                                  </WithStyles(ForwardRef)>
                                }
                              >
                                <div
                                  aria-describedby={null}
                                  className=""
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseOver={[Function]}
                                  onTouchStart={[Function]}
                                  style={
                                    Object {
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    }
                                  }
                                  title={null}
                                >
                                  <ComponentFunction>
                                    Option2
                                  </ComponentFunction>
                                </div>
                                <ForwardRef(Popper)
                                  anchorEl={
                                    <div
                                      class=""
                                      style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                    >
                                      Option2
                                    </div>
                                  }
                                  className="MuiTooltip-popper HvTooltip-popper"
                                  id={null}
                                  open={false}
                                  placement="top"
                                  popperOptions={
                                    Object {
                                      "modifiers": Object {
                                        "arrow": Object {
                                          "element": null,
                                          "enabled": false,
                                        },
                                      },
                                    }
                                  }
                                  transition={true}
                                />
                              </ForwardRef(Tooltip)>
                            </WithStyles(ForwardRef(Tooltip))>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </Component>
                    </li>
                  </ConditionalWrapper>
                </Focus>
              </WithStyles(Focus)>
            </HvListItem>
          </WithStyles(HvListItem)>
          <WithStyles(HvListItem)
            classes={
              Object {
                "gutters": "HvNavigationAnchors-listItemGutters",
                "selected": "HvNavigationAnchors-listItemSelected",
              }
            }
            key=".$Option3"
            onClick={[Function]}
            selected={false}
            tabIndex={-1}
          >
            <HvListItem
              classes={
                Object {
                  "condensed": "HvListItem-condensed",
                  "disabled": "HvListItem-disabled",
                  "endAdornment": "HvListItem-endAdornment",
                  "focus": "HvListItem-focus",
                  "gutters": "HvListItem-gutters HvNavigationAnchors-listItemGutters",
                  "interactive": "HvListItem-interactive",
                  "root": "HvListItem-root",
                  "selected": "HvListItem-selected HvNavigationAnchors-listItemSelected",
                  "startAdornment": "HvListItem-startAdornment",
                  "withEndAdornment": "HvListItem-withEndAdornment",
                  "withStartAdornment": "HvListItem-withStartAdornment",
                }
              }
              onClick={[Function]}
              selected={false}
              tabIndex={-1}
            >
              <WithStyles(Focus)
                classes={
                  Object {
                    "focus": "HvListItem-focus",
                  }
                }
                configuration={
                  Object {
                    "tabIndex": -1,
                  }
                }
                rootRef={
                  Object {
                    "current": <ul
                      class="HvNavigationAnchors-root HvListContainer-root"
                    >
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                        tabindex="0"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option1
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option2
                        </div>
                      </li>
                      <li
                        class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                        tabindex="-1"
                      >
                        <div
                          class=""
                          style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                        >
                          Option3
                        </div>
                      </li>
                    </ul>,
                  }
                }
                selected={false}
                strategy="menu"
              >
                <Focus
                  classes={
                    Object {
                      "disabled": "HvFocus-disabled",
                      "externalReference": "HvFocus-externalReference",
                      "falseFocus": "HvFocus-falseFocus",
                      "focus": "HvFocus-focus HvListItem-focus",
                      "focusDisabled": "HvFocus-focusDisabled",
                      "focused": "HvFocus-focused",
                      "root": "HvFocus-root",
                      "selected": "HvFocus-selected",
                    }
                  }
                  configuration={
                    Object {
                      "tabIndex": -1,
                    }
                  }
                  rootRef={
                    Object {
                      "current": <ul
                        class="HvNavigationAnchors-root HvListContainer-root"
                      >
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvListItem-selected HvNavigationAnchors-listItemSelected HvFocus-root HvFocus-selected HvFocus-focusDisabled"
                          tabindex="0"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option1
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option2
                          </div>
                        </li>
                        <li
                          class="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                          tabindex="-1"
                        >
                          <div
                            class=""
                            style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                          >
                            Option3
                          </div>
                        </li>
                      </ul>,
                    }
                  }
                  selected={false}
                  strategy="menu"
                >
                  <ConditionalWrapper
                    condition={false}
                    wrapper={[Function]}
                  >
                    <li
                      className="HvListItem-root HvListItem-gutters HvNavigationAnchors-listItemGutters HvListItem-interactive HvFocus-root HvFocus-focusDisabled"
                      onBlur={[Function]}
                      onClick={[Function]}
                      onFocus={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      onMouseDown={[Function]}
                      selected={false}
                    >
                      <Component>
                        <WithStyles(ForwardRef)
                          disableFocusListener={true}
                          disableHoverListener={false}
                          disableTouchListener={true}
                          open={false}
                          placement="top"
                          style={
                            Object {
                              "overflow": "hidden",
                              "textOverflow": "ellipsis",
                              "whiteSpace": "nowrap",
                            }
                          }
                          title={
                            <WithStyles(ForwardRef)>
                              Option3
                            </WithStyles(ForwardRef)>
                          }
                        >
                          <ForwardRef
                            classes={
                              Object {
                                "color": "HvTooltip-color",
                                "popper": "HvTooltip-popper",
                                "root": "HvTooltip-root",
                                "separator": "HvTooltip-separator",
                                "separatorColor": "HvTooltip-separatorColor",
                                "title": "HvTooltip-title",
                                "tooltip": "HvTooltip-tooltip",
                                "tooltipMulti": "HvTooltip-tooltipMulti",
                                "valueWrapper": "HvTooltip-valueWrapper",
                                "values": "HvTooltip-values",
                                "valuesContainer": "HvTooltip-valuesContainer",
                              }
                            }
                            disableFocusListener={true}
                            disableHoverListener={false}
                            disableTouchListener={true}
                            open={false}
                            placement="top"
                            style={
                              Object {
                                "overflow": "hidden",
                                "textOverflow": "ellipsis",
                                "whiteSpace": "nowrap",
                              }
                            }
                            title={
                              <WithStyles(ForwardRef)>
                                Option3
                              </WithStyles(ForwardRef)>
                            }
                          >
                            <WithStyles(ForwardRef(Tooltip))
                              TransitionComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "children": [Function],
                                    "disableStrictModeCompat": [Function],
                                    "in": [Function],
                                    "onEnter": [Function],
                                    "onEntered": [Function],
                                    "onEntering": [Function],
                                    "onExit": [Function],
                                    "onExited": [Function],
                                    "onExiting": [Function],
                                    "style": [Function],
                                    "timeout": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              TransitionProps={
                                Object {
                                  "timeout": 400,
                                }
                              }
                              classes={
                                Object {
                                  "popper": "HvTooltip-popper",
                                  "tooltip": "HvTooltip-tooltip",
                                }
                              }
                              disableFocusListener={true}
                              disableHoverListener={false}
                              disableTouchListener={true}
                              enterDelay={300}
                              open={false}
                              placement="top"
                              style={
                                Object {
                                  "overflow": "hidden",
                                  "textOverflow": "ellipsis",
                                  "whiteSpace": "nowrap",
                                }
                              }
                              title={
                                <WithStyles(ForwardRef)>
                                  Option3
                                </WithStyles(ForwardRef)>
                              }
                            >
                              <ForwardRef(Tooltip)
                                TransitionComponent={
                                  Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "propTypes": Object {
                                      "children": [Function],
                                      "disableStrictModeCompat": [Function],
                                      "in": [Function],
                                      "onEnter": [Function],
                                      "onEntered": [Function],
                                      "onEntering": [Function],
                                      "onExit": [Function],
                                      "onExited": [Function],
                                      "onExiting": [Function],
                                      "style": [Function],
                                      "timeout": [Function],
                                    },
                                    "render": [Function],
                                  }
                                }
                                TransitionProps={
                                  Object {
                                    "timeout": 400,
                                  }
                                }
                                classes={
                                  Object {
                                    "arrow": "MuiTooltip-arrow",
                                    "popper": "MuiTooltip-popper HvTooltip-popper",
                                    "popperArrow": "MuiTooltip-popperArrow",
                                    "popperInteractive": "MuiTooltip-popperInteractive",
                                    "tooltip": "MuiTooltip-tooltip HvTooltip-tooltip",
                                    "tooltipArrow": "MuiTooltip-tooltipArrow",
                                    "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
                                    "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
                                    "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
                                    "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
                                    "touch": "MuiTooltip-touch",
                                  }
                                }
                                disableFocusListener={true}
                                disableHoverListener={false}
                                disableTouchListener={true}
                                enterDelay={300}
                                open={false}
                                placement="top"
                                style={
                                  Object {
                                    "overflow": "hidden",
                                    "textOverflow": "ellipsis",
                                    "whiteSpace": "nowrap",
                                  }
                                }
                                title={
                                  <WithStyles(ForwardRef)>
                                    Option3
                                  </WithStyles(ForwardRef)>
                                }
                              >
                                <div
                                  aria-describedby={null}
                                  className=""
                                  onMouseEnter={[Function]}
                                  onMouseLeave={[Function]}
                                  onMouseOver={[Function]}
                                  onTouchStart={[Function]}
                                  style={
                                    Object {
                                      "overflow": "hidden",
                                      "textOverflow": "ellipsis",
                                      "whiteSpace": "nowrap",
                                    }
                                  }
                                  title={null}
                                >
                                  <ComponentFunction>
                                    Option3
                                  </ComponentFunction>
                                </div>
                                <ForwardRef(Popper)
                                  anchorEl={
                                    <div
                                      class=""
                                      style="overflow: hidden; text-overflow: ellipsis; white-space: nowrap;"
                                    >
                                      Option3
                                    </div>
                                  }
                                  className="MuiTooltip-popper HvTooltip-popper"
                                  id={null}
                                  open={false}
                                  placement="top"
                                  popperOptions={
                                    Object {
                                      "modifiers": Object {
                                        "arrow": Object {
                                          "element": null,
                                          "enabled": false,
                                        },
                                      },
                                    }
                                  }
                                  transition={true}
                                />
                              </ForwardRef(Tooltip)>
                            </WithStyles(ForwardRef(Tooltip))>
                          </ForwardRef>
                        </WithStyles(ForwardRef)>
                      </Component>
                    </li>
                  </ConditionalWrapper>
                </Focus>
              </WithStyles(Focus)>
            </HvListItem>
          </WithStyles(HvListItem)>
        </ul>
      </ForwardRef>
    </WithStyles(ForwardRef)>
  </NavigationAnchors>
</WithStyles(NavigationAnchors)>
`;
