// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PeriodPicker should render correctly 1`] = `
<WithStyles(PeriodPicker)
  onChangePeriod={[MockFunction]}
  period="AM"
>
  <PeriodPicker
    classes={
      Object {
        "icon": "HvTimePickerPeriodPicker-icon",
        "periodContainer": "HvTimePickerPeriodPicker-periodContainer",
        "periodToggle": "HvTimePickerPeriodPicker-periodToggle",
        "subtractIcon": "HvTimePickerPeriodPicker-subtractIcon",
      }
    }
    onChangePeriod={[MockFunction]}
    period="AM"
  >
    <div
      className="HvTimePickerPeriodPicker-periodContainer"
    >
      <DropUpXS
        className="HvTimePickerPeriodPicker-icon"
        onClick={[Function]}
      >
        <HvIconBase
          className="HvTimePickerPeriodPicker-icon"
          iconSize="XS"
          name="DropUpXS"
          onClick={[Function]}
        >
          <div
            className="HvTimePickerPeriodPicker-icon HvIconBase-root HvIconBase-xs"
            name="DropUpXS"
            onClick={[Function]}
          >
            <svg
              focusable={false}
              height={12}
              viewBox="0 0 12 12"
              width={12}
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                className="color0"
                d="M10.6 7.95l-.7.7L6 4.75l-3.9 3.9-.7-.7L6 3.35z"
                fill="#414141"
              />
            </svg>
          </div>
        </HvIconBase>
      </DropUpXS>
      <WithStyles(ForwardRef)
        className="HvTimePickerPeriodPicker-periodToggle"
        onClick={[Function]}
        selected={false}
      >
        <ForwardRef
          className="HvTimePickerPeriodPicker-periodToggle"
          classes={Object {}}
          onClick={[Function]}
          selected={false}
        >
          <WithStyles(ForwardRef)
            aria-pressed={false}
            className="HvTimePickerPeriodPicker-periodToggle"
            classes={Object {}}
            icon={true}
            onClick={[Function]}
          >
            <ForwardRef
              aria-pressed={false}
              className="HvTimePickerPeriodPicker-periodToggle"
              classes={
                Object {
                  "focusVisible": "HvButton-focusVisible",
                  "ghost": "HvButton-ghost",
                  "ghostDisabled": "HvButton-ghostDisabled",
                  "ghostSVG": "HvButton-ghostSVG",
                  "icon": "HvButton-icon",
                  "iconSVG": "HvButton-iconSVG",
                  "primary": "HvButton-primary",
                  "primaryDisabled": "HvButton-primaryDisabled",
                  "primarySVG": "HvButton-primarySVG",
                  "root": "HvButton-root",
                  "secondary": "HvButton-secondary",
                  "secondaryDisabled": "HvButton-secondaryDisabled",
                  "secondarySVG": "HvButton-secondarySVG",
                  "semantic": "HvButton-semantic",
                  "semanticDisabled": "HvButton-semanticDisabled",
                  "semanticSVG": "HvButton-semanticSVG",
                  "startIcon": "HvButton-startIcon",
                }
              }
              icon={true}
              onClick={[Function]}
            >
              <WithStyles(ForwardRef(Button))
                aria-pressed={false}
                className="HvTimePickerPeriodPicker-periodToggle HvButton-icon HvButton-ghostSVG"
                classes={
                  Object {
                    "containedPrimary": "HvButton-primary",
                    "disabled": "HvButton-ghostDisabled",
                    "outlinedPrimary": "HvButton-secondary",
                    "root": "HvButton-root",
                    "startIcon": "HvButton-startIcon",
                    "textPrimary": "HvButton-ghost",
                  }
                }
                color="primary"
                disableRipple={true}
                focusVisibleClassName="HvIsFocusVisible HvButton-focusVisible"
                onClick={[Function]}
                variant="text"
              >
                <ForwardRef(Button)
                  aria-pressed={false}
                  className="HvTimePickerPeriodPicker-periodToggle HvButton-icon HvButton-ghostSVG"
                  classes={
                    Object {
                      "colorInherit": "MuiButton-colorInherit",
                      "contained": "MuiButton-contained",
                      "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                      "containedSecondary": "MuiButton-containedSecondary",
                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                      "disableElevation": "MuiButton-disableElevation",
                      "disabled": "Mui-disabled HvButton-ghostDisabled",
                      "endIcon": "MuiButton-endIcon",
                      "focusVisible": "Mui-focusVisible",
                      "fullWidth": "MuiButton-fullWidth",
                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                      "label": "MuiButton-label",
                      "outlined": "MuiButton-outlined",
                      "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                      "root": "MuiButton-root HvButton-root",
                      "sizeLarge": "MuiButton-sizeLarge",
                      "sizeSmall": "MuiButton-sizeSmall",
                      "startIcon": "MuiButton-startIcon HvButton-startIcon",
                      "text": "MuiButton-text",
                      "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                      "textSecondary": "MuiButton-textSecondary",
                      "textSizeLarge": "MuiButton-textSizeLarge",
                      "textSizeSmall": "MuiButton-textSizeSmall",
                    }
                  }
                  color="primary"
                  disableRipple={true}
                  focusVisibleClassName="HvIsFocusVisible HvButton-focusVisible"
                  onClick={[Function]}
                  variant="text"
                >
                  <WithStyles(ForwardRef(ButtonBase))
                    aria-pressed={false}
                    className="MuiButton-root HvButton-root MuiButton-text HvTimePickerPeriodPicker-periodToggle HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                    component="button"
                    disableRipple={true}
                    disabled={false}
                    focusRipple={true}
                    focusVisibleClassName="Mui-focusVisible HvIsFocusVisible HvButton-focusVisible"
                    onClick={[Function]}
                    type="button"
                  >
                    <ForwardRef(ButtonBase)
                      aria-pressed={false}
                      className="MuiButton-root HvButton-root MuiButton-text HvTimePickerPeriodPicker-periodToggle HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "focusVisible": "Mui-focusVisible",
                          "root": "MuiButtonBase-root",
                        }
                      }
                      component="button"
                      disableRipple={true}
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible HvIsFocusVisible HvButton-focusVisible"
                      onClick={[Function]}
                      type="button"
                    >
                      <button
                        aria-pressed={false}
                        className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvTimePickerPeriodPicker-periodToggle HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                        disabled={false}
                        onBlur={[Function]}
                        onClick={[Function]}
                        onDragLeave={[Function]}
                        onFocus={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        onMouseDown={[Function]}
                        onMouseLeave={[Function]}
                        onMouseUp={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                        tabIndex={0}
                        type="button"
                      >
                        <span
                          className="MuiButton-label"
                        >
                          AM
                        </span>
                      </button>
                    </ForwardRef(ButtonBase)>
                  </WithStyles(ForwardRef(ButtonBase))>
                </ForwardRef(Button)>
              </WithStyles(ForwardRef(Button))>
            </ForwardRef>
          </WithStyles(ForwardRef)>
        </ForwardRef>
      </WithStyles(ForwardRef)>
      <DropDownXS
        className="HvTimePickerPeriodPicker-icon HvTimePickerPeriodPicker-subtractIcon"
        onClick={[Function]}
      >
        <HvIconBase
          className="HvTimePickerPeriodPicker-icon HvTimePickerPeriodPicker-subtractIcon"
          iconSize="XS"
          name="DropDownXS"
          onClick={[Function]}
        >
          <div
            className="HvTimePickerPeriodPicker-icon HvTimePickerPeriodPicker-subtractIcon HvIconBase-root HvIconBase-xs"
            name="DropDownXS"
            onClick={[Function]}
          >
            <svg
              focusable={false}
              height={12}
              viewBox="0 0 12 12"
              width={12}
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                className="color0"
                d="M5.99994 8.65L1.4 4.05l.7-.7L6 7.25l3.9-3.9.7.7z"
                fill="#414141"
              />
            </svg>
          </div>
        </HvIconBase>
      </DropDownXS>
    </div>
  </PeriodPicker>
</WithStyles(PeriodPicker)>
`;
