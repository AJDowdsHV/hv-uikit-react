// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Multi Line Tooltip - No Header should render multiple line tooltip correctly 1`] = `
<WithStyles(ForwardRef)
  title={
    <div>
      <ForwardRef(WithStyles)
        variant="highlightText"
      >
        
      </ForwardRef(WithStyles)>
      <div>
        <ForwardRef(WithStyles)
          variant="highlightText"
        >
          Status
        </ForwardRef(WithStyles)>
        <div />
        <ForwardRef(WithStyles)>
          Open
        </ForwardRef(WithStyles)>
      </div>
      <div>
        <ForwardRef(WithStyles)
          variant="highlightText"
        >
          Date
        </ForwardRef(WithStyles)>
        <div />
        <ForwardRef(WithStyles)>
          12/08/2018
        </ForwardRef(WithStyles)>
      </div>
      <div>
        <ForwardRef(WithStyles)
          variant="highlightText"
        >
          Assignee
        </ForwardRef(WithStyles)>
        <div />
        <ForwardRef(WithStyles)>
          Management
        </ForwardRef(WithStyles)>
      </div>
      <div>
        <ForwardRef(WithStyles)
          variant="highlightText"
        >
          Approval
        </ForwardRef(WithStyles)>
        <div />
        <ForwardRef(WithStyles)>
          Not yet requested
        </ForwardRef(WithStyles)>
      </div>
    </div>
  }
  useSingle={false}
>
  <ForwardRef
    classes={
      Object {
        "color": "HvTooltip-color",
        "popper": "HvTooltip-popper",
        "root": "HvTooltip-root",
        "separator": "HvTooltip-separator",
        "separatorColor": "HvTooltip-separatorColor",
        "title": "HvTooltip-title",
        "tooltip": "HvTooltip-tooltip",
        "tooltipMulti": "HvTooltip-tooltipMulti",
        "valueWrapper": "HvTooltip-valueWrapper",
        "values": "HvTooltip-values",
        "valuesContainer": "HvTooltip-valuesContainer",
      }
    }
    title={
      <div>
        <ForwardRef(WithStyles)
          variant="highlightText"
        >
          
        </ForwardRef(WithStyles)>
        <div>
          <ForwardRef(WithStyles)
            variant="highlightText"
          >
            Status
          </ForwardRef(WithStyles)>
          <div />
          <ForwardRef(WithStyles)>
            Open
          </ForwardRef(WithStyles)>
        </div>
        <div>
          <ForwardRef(WithStyles)
            variant="highlightText"
          >
            Date
          </ForwardRef(WithStyles)>
          <div />
          <ForwardRef(WithStyles)>
            12/08/2018
          </ForwardRef(WithStyles)>
        </div>
        <div>
          <ForwardRef(WithStyles)
            variant="highlightText"
          >
            Assignee
          </ForwardRef(WithStyles)>
          <div />
          <ForwardRef(WithStyles)>
            Management
          </ForwardRef(WithStyles)>
        </div>
        <div>
          <ForwardRef(WithStyles)
            variant="highlightText"
          >
            Approval
          </ForwardRef(WithStyles)>
          <div />
          <ForwardRef(WithStyles)>
            Not yet requested
          </ForwardRef(WithStyles)>
        </div>
      </div>
    }
    useSingle={false}
  >
    <WithStyles(ForwardRef(Tooltip))
      TransitionComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "propTypes": Object {
            "children": [Function],
            "in": [Function],
            "onEnter": [Function],
            "onExit": [Function],
            "style": [Function],
            "timeout": [Function],
          },
          "render": [Function],
        }
      }
      TransitionProps={
        Object {
          "timeout": 400,
        }
      }
      classes={
        Object {
          "popper": "HvTooltip-popper",
          "tooltip": "HvTooltip-tooltipMulti",
        }
      }
      enterDelay={300}
      placement="top"
      title={
        <div>
          <ForwardRef(WithStyles)
            variant="highlightText"
          >
            
          </ForwardRef(WithStyles)>
          <div>
            <ForwardRef(WithStyles)
              variant="highlightText"
            >
              Status
            </ForwardRef(WithStyles)>
            <div />
            <ForwardRef(WithStyles)>
              Open
            </ForwardRef(WithStyles)>
          </div>
          <div>
            <ForwardRef(WithStyles)
              variant="highlightText"
            >
              Date
            </ForwardRef(WithStyles)>
            <div />
            <ForwardRef(WithStyles)>
              12/08/2018
            </ForwardRef(WithStyles)>
          </div>
          <div>
            <ForwardRef(WithStyles)
              variant="highlightText"
            >
              Assignee
            </ForwardRef(WithStyles)>
            <div />
            <ForwardRef(WithStyles)>
              Management
            </ForwardRef(WithStyles)>
          </div>
          <div>
            <ForwardRef(WithStyles)
              variant="highlightText"
            >
              Approval
            </ForwardRef(WithStyles)>
            <div />
            <ForwardRef(WithStyles)>
              Not yet requested
            </ForwardRef(WithStyles)>
          </div>
        </div>
      }
    >
      <ForwardRef(Tooltip)
        TransitionComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "children": [Function],
              "in": [Function],
              "onEnter": [Function],
              "onExit": [Function],
              "style": [Function],
              "timeout": [Function],
            },
            "render": [Function],
          }
        }
        TransitionProps={
          Object {
            "timeout": 400,
          }
        }
        classes={
          Object {
            "arrow": "MuiTooltip-arrow",
            "popper": "MuiTooltip-popper HvTooltip-popper",
            "popperArrow": "MuiTooltip-popperArrow",
            "popperInteractive": "MuiTooltip-popperInteractive",
            "tooltip": "MuiTooltip-tooltip HvTooltip-tooltipMulti",
            "tooltipArrow": "MuiTooltip-tooltipArrow",
            "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
            "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
            "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
            "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
            "touch": "MuiTooltip-touch",
          }
        }
        enterDelay={300}
        placement="top"
        title={
          <div>
            <ForwardRef(WithStyles)
              variant="highlightText"
            >
              
            </ForwardRef(WithStyles)>
            <div>
              <ForwardRef(WithStyles)
                variant="highlightText"
              >
                Status
              </ForwardRef(WithStyles)>
              <div />
              <ForwardRef(WithStyles)>
                Open
              </ForwardRef(WithStyles)>
            </div>
            <div>
              <ForwardRef(WithStyles)
                variant="highlightText"
              >
                Date
              </ForwardRef(WithStyles)>
              <div />
              <ForwardRef(WithStyles)>
                12/08/2018
              </ForwardRef(WithStyles)>
            </div>
            <div>
              <ForwardRef(WithStyles)
                variant="highlightText"
              >
                Assignee
              </ForwardRef(WithStyles)>
              <div />
              <ForwardRef(WithStyles)>
                Management
              </ForwardRef(WithStyles)>
            </div>
            <div>
              <ForwardRef(WithStyles)
                variant="highlightText"
              >
                Approval
              </ForwardRef(WithStyles)>
              <div />
              <ForwardRef(WithStyles)>
                Not yet requested
              </ForwardRef(WithStyles)>
            </div>
          </div>
        }
      >
        <button
          aria-describedby={null}
          className=""
          id="testChild"
          onBlur={[Function]}
          onFocus={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
          onTouchEnd={[Function]}
          onTouchStart={[Function]}
          title={null}
          type="submit"
        >
          Hello World
        </button>
        <ForwardRef(Popper)
          anchorEl={
            <button
              class=""
              id="testChild"
              type="submit"
            >
              Hello World
            </button>
          }
          className="MuiTooltip-popper HvTooltip-popper"
          id={null}
          open={false}
          placement="top"
          popperOptions={
            Object {
              "modifiers": Object {
                "arrow": Object {
                  "element": null,
                  "enabled": false,
                },
              },
            }
          }
          transition={true}
        />
      </ForwardRef(Tooltip)>
    </WithStyles(ForwardRef(Tooltip))>
  </ForwardRef>
</WithStyles(ForwardRef)>
`;

exports[`Multi Line Tooltip - With Header should render multiple line tooltip with header correctly 1`] = `
<WithStyles(ForwardRef)
  title={
    <div>
      <ForwardRef(WithStyles)
        variant="highlightText"
      >
        January
      </ForwardRef(WithStyles)>
      <div>
        <ForwardRef(WithStyles)
          variant="highlightText"
        >
          Sales
        </ForwardRef(WithStyles)>
        <div />
        <ForwardRef(WithStyles)>
          52,000 units
        </ForwardRef(WithStyles)>
      </div>
      <div>
        <ForwardRef(WithStyles)
          variant="highlightText"
        >
          Profit
        </ForwardRef(WithStyles)>
        <div />
        <ForwardRef(WithStyles)>
          50%
        </ForwardRef(WithStyles)>
      </div>
    </div>
  }
  useSingle={false}
>
  <ForwardRef
    classes={
      Object {
        "color": "HvTooltip-color",
        "popper": "HvTooltip-popper",
        "root": "HvTooltip-root",
        "separator": "HvTooltip-separator",
        "separatorColor": "HvTooltip-separatorColor",
        "title": "HvTooltip-title",
        "tooltip": "HvTooltip-tooltip",
        "tooltipMulti": "HvTooltip-tooltipMulti",
        "valueWrapper": "HvTooltip-valueWrapper",
        "values": "HvTooltip-values",
        "valuesContainer": "HvTooltip-valuesContainer",
      }
    }
    title={
      <div>
        <ForwardRef(WithStyles)
          variant="highlightText"
        >
          January
        </ForwardRef(WithStyles)>
        <div>
          <ForwardRef(WithStyles)
            variant="highlightText"
          >
            Sales
          </ForwardRef(WithStyles)>
          <div />
          <ForwardRef(WithStyles)>
            52,000 units
          </ForwardRef(WithStyles)>
        </div>
        <div>
          <ForwardRef(WithStyles)
            variant="highlightText"
          >
            Profit
          </ForwardRef(WithStyles)>
          <div />
          <ForwardRef(WithStyles)>
            50%
          </ForwardRef(WithStyles)>
        </div>
      </div>
    }
    useSingle={false}
  >
    <WithStyles(ForwardRef(Tooltip))
      TransitionComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "propTypes": Object {
            "children": [Function],
            "in": [Function],
            "onEnter": [Function],
            "onExit": [Function],
            "style": [Function],
            "timeout": [Function],
          },
          "render": [Function],
        }
      }
      TransitionProps={
        Object {
          "timeout": 400,
        }
      }
      classes={
        Object {
          "popper": "HvTooltip-popper",
          "tooltip": "HvTooltip-tooltipMulti",
        }
      }
      enterDelay={300}
      placement="top"
      title={
        <div>
          <ForwardRef(WithStyles)
            variant="highlightText"
          >
            January
          </ForwardRef(WithStyles)>
          <div>
            <ForwardRef(WithStyles)
              variant="highlightText"
            >
              Sales
            </ForwardRef(WithStyles)>
            <div />
            <ForwardRef(WithStyles)>
              52,000 units
            </ForwardRef(WithStyles)>
          </div>
          <div>
            <ForwardRef(WithStyles)
              variant="highlightText"
            >
              Profit
            </ForwardRef(WithStyles)>
            <div />
            <ForwardRef(WithStyles)>
              50%
            </ForwardRef(WithStyles)>
          </div>
        </div>
      }
    >
      <ForwardRef(Tooltip)
        TransitionComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "children": [Function],
              "in": [Function],
              "onEnter": [Function],
              "onExit": [Function],
              "style": [Function],
              "timeout": [Function],
            },
            "render": [Function],
          }
        }
        TransitionProps={
          Object {
            "timeout": 400,
          }
        }
        classes={
          Object {
            "arrow": "MuiTooltip-arrow",
            "popper": "MuiTooltip-popper HvTooltip-popper",
            "popperArrow": "MuiTooltip-popperArrow",
            "popperInteractive": "MuiTooltip-popperInteractive",
            "tooltip": "MuiTooltip-tooltip HvTooltip-tooltipMulti",
            "tooltipArrow": "MuiTooltip-tooltipArrow",
            "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
            "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
            "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
            "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
            "touch": "MuiTooltip-touch",
          }
        }
        enterDelay={300}
        placement="top"
        title={
          <div>
            <ForwardRef(WithStyles)
              variant="highlightText"
            >
              January
            </ForwardRef(WithStyles)>
            <div>
              <ForwardRef(WithStyles)
                variant="highlightText"
              >
                Sales
              </ForwardRef(WithStyles)>
              <div />
              <ForwardRef(WithStyles)>
                52,000 units
              </ForwardRef(WithStyles)>
            </div>
            <div>
              <ForwardRef(WithStyles)
                variant="highlightText"
              >
                Profit
              </ForwardRef(WithStyles)>
              <div />
              <ForwardRef(WithStyles)>
                50%
              </ForwardRef(WithStyles)>
            </div>
          </div>
        }
      >
        <button
          aria-describedby={null}
          className=""
          id="testChild"
          onBlur={[Function]}
          onFocus={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
          onTouchEnd={[Function]}
          onTouchStart={[Function]}
          title={null}
          type="submit"
        >
          Hello World
        </button>
        <ForwardRef(Popper)
          anchorEl={
            <button
              class=""
              id="testChild"
              type="submit"
            >
              Hello World
            </button>
          }
          className="MuiTooltip-popper HvTooltip-popper"
          id={null}
          open={false}
          placement="top"
          popperOptions={
            Object {
              "modifiers": Object {
                "arrow": Object {
                  "element": null,
                  "enabled": false,
                },
              },
            }
          }
          transition={true}
        />
      </ForwardRef(Tooltip)>
    </WithStyles(ForwardRef(Tooltip))>
  </ForwardRef>
</WithStyles(ForwardRef)>
`;

exports[`Single Line Tooltip should render single line tooltip correctly 1`] = `
<WithStyles(ForwardRef)
  title={
    <ForwardRef(WithStyles)
      variant="highlightText"
    >
      Grid View
    </ForwardRef(WithStyles)>
  }
>
  <ForwardRef
    classes={
      Object {
        "color": "HvTooltip-color",
        "popper": "HvTooltip-popper",
        "root": "HvTooltip-root",
        "separator": "HvTooltip-separator",
        "separatorColor": "HvTooltip-separatorColor",
        "title": "HvTooltip-title",
        "tooltip": "HvTooltip-tooltip",
        "tooltipMulti": "HvTooltip-tooltipMulti",
        "valueWrapper": "HvTooltip-valueWrapper",
        "values": "HvTooltip-values",
        "valuesContainer": "HvTooltip-valuesContainer",
      }
    }
    title={
      <ForwardRef(WithStyles)
        variant="highlightText"
      >
        Grid View
      </ForwardRef(WithStyles)>
    }
  >
    <WithStyles(ForwardRef(Tooltip))
      TransitionComponent={
        Object {
          "$$typeof": Symbol(react.forward_ref),
          "propTypes": Object {
            "children": [Function],
            "in": [Function],
            "onEnter": [Function],
            "onExit": [Function],
            "style": [Function],
            "timeout": [Function],
          },
          "render": [Function],
        }
      }
      TransitionProps={
        Object {
          "timeout": 400,
        }
      }
      classes={
        Object {
          "popper": "HvTooltip-popper",
          "tooltip": "HvTooltip-tooltip",
        }
      }
      enterDelay={300}
      placement="top"
      title={
        <ForwardRef(WithStyles)
          variant="highlightText"
        >
          Grid View
        </ForwardRef(WithStyles)>
      }
    >
      <ForwardRef(Tooltip)
        TransitionComponent={
          Object {
            "$$typeof": Symbol(react.forward_ref),
            "propTypes": Object {
              "children": [Function],
              "in": [Function],
              "onEnter": [Function],
              "onExit": [Function],
              "style": [Function],
              "timeout": [Function],
            },
            "render": [Function],
          }
        }
        TransitionProps={
          Object {
            "timeout": 400,
          }
        }
        classes={
          Object {
            "arrow": "MuiTooltip-arrow",
            "popper": "MuiTooltip-popper HvTooltip-popper",
            "popperArrow": "MuiTooltip-popperArrow",
            "popperInteractive": "MuiTooltip-popperInteractive",
            "tooltip": "MuiTooltip-tooltip HvTooltip-tooltip",
            "tooltipArrow": "MuiTooltip-tooltipArrow",
            "tooltipPlacementBottom": "MuiTooltip-tooltipPlacementBottom",
            "tooltipPlacementLeft": "MuiTooltip-tooltipPlacementLeft",
            "tooltipPlacementRight": "MuiTooltip-tooltipPlacementRight",
            "tooltipPlacementTop": "MuiTooltip-tooltipPlacementTop",
            "touch": "MuiTooltip-touch",
          }
        }
        enterDelay={300}
        placement="top"
        title={
          <ForwardRef(WithStyles)
            variant="highlightText"
          >
            Grid View
          </ForwardRef(WithStyles)>
        }
      >
        <button
          aria-describedby={null}
          className=""
          id="testChild"
          onBlur={[Function]}
          onFocus={[Function]}
          onMouseLeave={[Function]}
          onMouseOver={[Function]}
          onTouchEnd={[Function]}
          onTouchStart={[Function]}
          title={null}
          type="submit"
        >
          Hello World
        </button>
        <ForwardRef(Popper)
          anchorEl={
            <button
              class=""
              id="testChild"
              type="submit"
            >
              Hello World
            </button>
          }
          className="MuiTooltip-popper HvTooltip-popper"
          id={null}
          open={false}
          placement="top"
          popperOptions={
            Object {
              "modifiers": Object {
                "arrow": Object {
                  "element": null,
                  "enabled": false,
                },
              },
            }
          }
          transition={true}
        />
      </ForwardRef(Tooltip)>
    </WithStyles(ForwardRef(Tooltip))>
  </ForwardRef>
</WithStyles(ForwardRef)>
`;
